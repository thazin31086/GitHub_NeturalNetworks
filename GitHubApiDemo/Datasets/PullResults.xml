<PullRequests>
  <PullRequest>
    <PullRequestID>38348</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Bind some syntax nodes even in error recovery scenarios.</Title>
    <PullRequestDescription>Fixes #27060</PullRequestDescription>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>31/08/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>38232</PullRequestID>
    <RepoID>1</RepoID>
    <Title>A switch expression only has a common type if all arms can be converted to that type.</Title>
    <PullRequestDescription>Fixes #38226</PullRequestDescription>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>38196</PullRequestID>
    <RepoID>1</RepoID>
    <Title>When a synthetic ref local is captured, variables referenced in its initializer must be captured too</Title>
    <PullRequestDescription>Fixes #36443</PullRequestDescription>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>38177</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Prevent static local functions from capturing local functions</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/38129.

Also fixes a typo in a comment that I found when looking for tests that check for CS8421.</PullRequestDescription>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>38135</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Give LangVersion error when type is generic due to parent type</Title>
    <PullRequestDescription>Closes #38105</PullRequestDescription>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>38037</PullRequestID>
    <RepoID>1</RepoID>
    <Title>TypeImportCompletionItem.GetCompletionDescriptionAsync should not return null</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/36381
At least I could not find other provider returning null.

@genlu please let me know if you see an option to add a unit test here.</PullRequestDescription>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>38014</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix crash in nullable Equals analysis</Title>
    <PullRequestDescription>Closes #38010.

/cc @agocke

This fixes a crash when we successfully resolve the overload of the Equals method being called but there are not enough arguments to it. In practice this means that only object.ReferenceEquals which is not overloaded would crash VS. Also fixes the same issue in CompareExchange analysis which could crash if it was only declared it with one overload.</PullRequestDescription>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>37915</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Reduce memory consumption for string concatenation from O(n^2) to O(n)</Title>
    <PullRequestDescription>Fixes #7398
Fixes #37572
Relates to https://github.com/aspnet/Razor/issues/614 and many other customer accomodations that are no longer needed.

History of this bug:  When constant folding a long sequence of string concatentations, there is an intermediate constant value for every left-hand operand.  So the total memory consumed to compute the whole concatenation was *O(n^2)*.  The compiler would simply perform this work and eventually run out of memory, simply crashing with no useful diagnostic.  Later, the concatenation implementation was instrumented so it would detect when it was likely to run out of memory soon, and would instead report a diagnostic at the last step. See https://github.com/dotnet/roslyn/commit/f177077665a5bef862014f1898b961d1759c9248.  Test `Bug529600()` was added to demonstrate that we produced a diagnostic.  However, the compiler still consumed *O(n^2)* memory for the concatenation and this test used to consume so much memory that it would cause other tests running in parallel to fail because they might not have enough memory to succeed.  So the test was disabled and eventually removed.  The compiler would still crash with programs containing large string concatenations, or consume huge amounts of memory and take a long time before reporting a diagnostic, so the underlying problem had not been addressed.

Here we have revised the implementation of constant folding string concatenations so that it requires *O(n)* memory and remove the old instrumentation.  As a consequence the test `Bug529600()` now runs very quickly and does not consume gobs of memory.
</PullRequestDescription>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>37818</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Handle hoisted temporary variables of the switch expression pattern-matching machinery.</Title>
    <PullRequestDescription>Fixes #37713

Note that before this bug fix we produce bad code for the added tests (we fail to hoist a needed temp or hoist a restricted type).
</PullRequestDescription>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>37772</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Eliminate host dependence for constant folding floating-point to integral conversions.</Title>
    <PullRequestDescription>Fixes #37527
</PullRequestDescription>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>37691</PullRequestID>
    <RepoID>1</RepoID>
    <Title>UniqueItem is not triggered when completion is initiated by backspace</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/37231</PullRequestDescription>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>37493</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Don't drop a token passed to a syntax factory method.</Title>
    <PullRequestDescription>Fixes #37467

@dotnet/roslyn-compiler May I please have a couple of reviews for this one-line bug fix for 16.3?
</PullRequestDescription>
    <CreatedDate>26/07/2019</CreatedDate>
    <ClosedDate>26/07/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>37450</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix region tracking for regions with local functions</Title>
    <PullRequestDescription>Fixes #37427

/cc @agocke
@CyrusNajmabadi I suspect this will address the anomaly you are seeing in your PR.</PullRequestDescription>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>26/07/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>37095</PullRequestID>
    <RepoID>1</RepoID>
    <Title>fix for insert a new line on pressing Enter if the suggested word was typed completely</Title>
    <PullRequestDescription>fixes https://github.com/dotnet/roslyn/issues/37082

Scenario:
1. The CompletionOptions.EnterKeyBehavior option is set to EnterKeyRule.AfterFullyTypedWord
2. Start completion and type the full word (like the whole `Length`).
3. Type Enter

**Expected**
The item has been committed and a new line has been added.

**Actual**
The item has been committed and **no** new line has been added.</PullRequestDescription>
    <CreatedDate>10/07/2019</CreatedDate>
    <ClosedDate>30/07/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>36940</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Hang on applying code action on a single unopened file</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/36938

`Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(System.Func&lt;Microsoft.CodeAnalysis.Document&gt; getFromDocument, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken) `
calls
`EditHandler.Apply(Async)`

ApplyAsync has the only asynchronous call to 
```
// ConfigureAwait(true) so we come back to the same thread as 	                
// we do all application on the UI thread.
var text = await singleChangedDocument.GetTextAsync(cancellationToken).ConfigureAwait(true);
```
which could lead to a deadlock with the caller.
  </PullRequestDescription>
    <CreatedDate>02/07/2019</CreatedDate>
    <ClosedDate>03/07/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>36678</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Don't treat zero-length deconstruction as an error when binding patterns.</Title>
    <PullRequestDescription>Fixes #36496

This is a tiny bug fix for a compiler "crash".
@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>36640</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Intellisense changes existing, correct variable to differently capitalized type of the same name</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/36513

```
void M()
{
        Structure structure;
        structure.$$
}
```
Typing backspace at $$ starts completion for `structure`. It should prefer the one matches the case of the text already typed, i.e. `structure` rather than `Structure`. 

We have the issue in the old completion as well. Thank you, @mqudsi for pointing to this!</PullRequestDescription>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>36331</PullRequestID>
    <RepoID>1</RepoID>
    <Title>completion: CTRL+Space is not applicable in Delete/Backspace triggered session</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/35301</PullRequestDescription>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>36293</PullRequestID>
    <RepoID>1</RepoID>
    <Title>IntelliSense not shown for overloaded methods, one with enums</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/36187</PullRequestDescription>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>36040</PullRequestID>
    <RepoID>1</RepoID>
    <Title>supporting types from params in intellisense</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/36029</PullRequestDescription>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>35962</PullRequestID>
    <RepoID>1</RepoID>
    <Title> crash on ClassifyUpdate for EventFields</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/32889</PullRequestDescription>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>35780</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Elide an emit optimization that produces bad code near a stackalloc.</Title>
    <PullRequestDescription>Fixes #35764
Also fix the type of a bound node (argument to a ctor) so it agrees with the corresponding parameter.

@jcouv @jaredpar Should this be patched on some other branch?
</PullRequestDescription>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>35664</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix bug where pattern-matching treats a type parameter as if it is a reference (which it might not be)</Title>
    <PullRequestDescription>Fixes #35584

@agocke @cston @jcouv for review.  This is a serious bad-code-gen regression and should be fixed in 16.1.  I'm not certain that I am targeting the correct branch.

**Customer and scenario info**

**Who is impacted by this bug?**
Customers who use pattern-matching in C# 7 in VS2019.

**What is the customer scenario and impact of the bug?**
The scenario is a pattern-matching operation where the input is a type parameter and it is being matched into a variable of type `object` or some reference base type of the type parameter.  The compiler produces unverifiable code, omitting a necessary `box` instruction on the input.  This causes a runtime crash when the type parameter is instantiated with a value type.

**What is the workaround?**
None

**How was the bug found?**
Customer-reported

**If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed?**

This is a regression in VS2019 versus previous VS2017.  We rewrote the code generation for pattern-matching from scratch in VS2019 in order to add other (experimental for C# 8) pattern-matching features, and this particular interaction was missed in testing.  The test gap is fixed here.

Dual-checkin for 16.2p1: https://github.com/dotnet/roslyn/pull/35709
VSTS issue for ask-mode: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/892715</PullRequestDescription>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>35463</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix lambda lowering for cast to generic ReadOnlySpan&lt;T&gt;</Title>
    <PullRequestDescription>Fixes #31685

The problem to be solved is to generate good code for
``` c#
ReadOnlySpan&lt;byte&gt; s = new byte[] { 1, 2, 3 };
```

There is an implicit conversion operator declared in `ReadOnlySpan&lt;T&gt;` that converts from `T[]` to `ReadOnlySpan&lt;T&gt;`.  However, in the particular case above we would like to elide creation of the array and create a read-only span that wraps the underlying data in the assembly.  There are primitives for doing this.

This was previously done in the compiler by eliding the lowering of the conversion to a bound call.  Lowering would instead preserve the user-defined conversion in the tree.  Then, in emit we would recognize that particular conversion and either perform the optimization if possible, or simply produce a call to the conversion method.  However, that had an unfortunate side-effect (bug), which this PR addresses.

Normally, the lowering phase would translate an invocation of a user-defined conversion operator into a `BoundCall`.  Subsequent phases of the compiler that need to rewrite symbols (such as lambda lowering and iterator rewriting, when the enclosing method is generic) would inherit the proper handling of rewriting symbols from the bound tree rewriter that is generated from `BoundNodes.xml`.  Unfortunately, the symbol appearing inside the conversion is not rewritten by that generated code, and there is no simple way to make it do so.  The bug report #31685 describes symptoms of this underlying issue.

There are a number of approaches one could take to address this issue:
1. Attempt to rehabilitate the original approach by extending the generated rewriter to handle conversions that may contain symbols.  That would require extending a few internal APIs and the bound tree rewriter.
2. Have the emit phase recognize a call to this particular conversion operator, and perform the optimization on that basis.
3. Add a new `BoundNode` that represents this particular optimizable pattern (which we would lower to), and let the generated bound node rewriter handle the contained symbol in subsequent phases where needed.

The approach here takes the third approach.  We back out the implementation of the optimization and add a new implementation based on a newly added bound node.
</PullRequestDescription>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>35411</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Use more robust initialization for TypeWithAnnotations.Builder (#35373)</Title>
    <PullRequestDescription>(cherry picked from commit c421f1249d1c2ba94e7703037ec49b4341f3b9f4)</PullRequestDescription>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>35120</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix sorting of import completion items</Title>
    <PullRequestDescription>Make sure type with shorter name shows first, e,g, `SomeType` before `SomeTypeWithLongerName`. Current implementation would show "SomeTypeWithLongerName" first.


Thanks @Dreamescaper for dogfooding and reporting the issue :)

@dotnet/roslyn-ide @CyrusNajmabadi 
</PullRequestDescription>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>35067</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Intellisense broken inside of methods that have delegates as arguments</Title>
    <PullRequestDescription>Fix https://github.com/dotnet/roslyn/issues/35027</PullRequestDescription>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>35014</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix regression for switching on a constant value</Title>
    <PullRequestDescription>We made a change in #32818 to restore compatibility with C# 7.x
in rejecting certain switch statements even when we could prove
completeness with the new switch analysis. It looks like that
change just went a little too far, as we could do the analysis
if the argument to the switch expression was a constant. This
change removes the compat clause for switches with constant
values

Fixes #35011</PullRequestDescription>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>34988</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Regex Completion + Async Completion = Failure to trigger on `[` in VB</Title>
    <PullRequestDescription>Fix https://github.com/dotnet/roslyn/issues/33852</PullRequestDescription>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>34911</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Switch on enum type nested in generic type produces LangVersion error</Title>
    <PullRequestDescription>Fixes #34905

@dotnet/roslyn-compiler This is a fix for a serious regression that would be introduced in 16.1p2 (mea culpa) if not for this bug fix.
</PullRequestDescription>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>34657</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Async Completion - Ctrl+Space isn't filtering the list (when non-unique)</Title>
    <PullRequestDescription>Fix https://github.com/dotnet/roslyn/issues/34601</PullRequestDescription>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>34316</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Check reachability when looking at uninitialized non-null fields</Title>
    <PullRequestDescription>If the end of a constructor is unreachable we shouldn't warn about
fields which are uninitialized at the end.

Fixes #25529</PullRequestDescription>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>34292</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Don't track uninitialized non-null struct fields</Title>
    <PullRequestDescription>It's already an error to fail to initialize a field of a struct, so
this warning is just a duplication of a more serious error condition

Fixes #30022</PullRequestDescription>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>34266</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Completion gets in the way attempting to line up arguments</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/34237</PullRequestDescription>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>34219</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Report uninitialized fields on field if ctor is default</Title>
    <PullRequestDescription>It's not clear that reporting warnings for unitialized non-null fields
on the field location is better in all cases (instead of the ctor) but
it seems a Pareto improvement for default constructors, specifically.

Fixes #32444</PullRequestDescription>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>34174</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Do not skip emit if errors are suppressed</Title>
    <PullRequestDescription>In the command line compilation we try to discover when to stop the
compilation stages based on if an error is produced. If the error was
produced by /warnaserror, then suppressed, this should not be considered
a compilation-halting error.

Fixes #34101</PullRequestDescription>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>34021</PullRequestID>
    <RepoID>1</RepoID>
    <Title>The default label is considered reachable in a traditional switch statement</Title>
    <PullRequestDescription>This fixes a compatibility bug (the new compiler complains about unreachable code, but if you remove it the old compiler complains about a switch fall-through).

Fixes #33783</PullRequestDescription>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33899</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Disable VirtualMemoryNotificationListener for Server GC</Title>
    <PullRequestDescription>
    </PullRequestDescription>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33875</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Completion does not work in the Immediate Window after expression evaluation</Title>
    <PullRequestDescription>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/809625
Fixes https://developercommunity.visualstudio.com/content/problem/478452/intellisense-in-immediate-window-does-not-work-sec.html</PullRequestDescription>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33870</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Regression test for suppression on ref-returns</Title>
    <PullRequestDescription>Verifies that the current implementation matches the latest
LDM decisions on nullable suppression and out variables

Closes #27522</PullRequestDescription>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33745</PullRequestID>
    <RepoID>1</RepoID>
    <Title>16.0 Preview 4. Up and down key do not work for editor if the old completion is turned on</Title>
    <PullRequestDescription>Fixes: https://github.com/dotnet/roslyn/issues/33744
</PullRequestDescription>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33697</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Correct parsing of a parenthesized constant pattern expression in switch expression arm</Title>
    <PullRequestDescription>Fixes #33675
</PullRequestDescription>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33682</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Roslyn recommends hard selection in async completion, breaking suggetion mode</Title>
    <PullRequestDescription>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/787151</PullRequestDescription>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33666</PullRequestID>
    <RepoID>1</RepoID>
    <Title>async completion: eats existing code on commit</Title>
    <PullRequestDescription>Fixes #33626</PullRequestDescription>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33588</PullRequestID>
    <RepoID>1</RepoID>
    <Title>F# Typing '.' after fully typing out a symbol does not trigger completion</Title>
    <PullRequestDescription>### Customer scenario
Typing `System.` in F#

**Expected**
Have a completion for dot

**Actual**
Have no completion for dot

![image](https://user-images.githubusercontent.com/5455484/53211839-7f460400-35f7-11e9-8cc3-fa663c4c9e13.png)

### Bugs this fixes
https://github.com/Microsoft/visualfsharp/issues/6266

### Workarounds, if any
None

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
None

### Root cause analysis
Dot (as some other characters) is a potential commit character in F# but it is removed from actual commit characters. Roslyn does not provide a correct support for such situations in the new completion because Roslyn does not have such cases in C# and VB. Priorities of Commit vs Filter differ between the old completion and the new completion. This causes the issue.

### How was the bug found?
Internal customers</PullRequestDescription>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33494</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Convert to struct has errors on uninitiated members</Title>
    <PullRequestDescription>### Customer scenario
1. Have code

```cs
public class Class
{
    void MyMethod()
    {
        var tuple = (3, "string");
    }
```

2. Place cursor before open parenthesis and type (Ctrl+.) to open codefixes
3. Choose "convert to struct" and run the refactoring.

**Expected**
The code generated is valid.

**Actual**
The code generated is invalid: it misses definitions for fields corresponding to non-named in the tuple such as Item1, Item2 and so on.

### Bugs this fixes
#33407

### Workarounds, if any
Manually add code for those fields.

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
This is a new feature just added. It was added with this defect.

### Root cause analysis
Test cases actually covered the situation but code provided in those tests cases contained errors. We may need to consider adding a validation of code generated in test scenarios.

### How was the bug found?
Internal customers</PullRequestDescription>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33401</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Changes are not allowed while code is running shows while ENC about VB framework app</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/32247</PullRequestDescription>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33300</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Bad code for consecutive interface type tests with a when clause in a switch (dev16.0)</Title>
    <PullRequestDescription>Fixes #32774

This was previously reviewed and approved by reviewers at #32808

See also https://devdiv.visualstudio.com/DevDiv/_workitems/edit/792969 for shiproom purposes.

/cc @jaredpar </PullRequestDescription>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33279</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix parsing regression of expressions involving parens when used as a case expression or a constant pattern.</Title>
    <PullRequestDescription>- Fix parsing regression of expressions involving parens when used as a case expression or a constant pattern.
Fixes #33054
Fixes #33208
- Incidentally also correct and test the precedence of the switch expression
See https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression for the spec.
- Fix terminology to match the spec - "conditional expression" rather than "ternary expression".

See also https://devdiv.visualstudio.com/DevDiv/_workitems/edit/792975 for shiproom purposes.

@dotnet/roslyn-compiler May I please have a couple of reviews of this parsing regression?
</PullRequestDescription>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>33196</PullRequestID>
    <RepoID>1</RepoID>
    <Title>completion and signature help ordering</Title>
    <PullRequestDescription>fixes https://github.com/dotnet/roslyn/issues/32940</PullRequestDescription>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>32818</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Simulate the C# 7 compiler's behavior on traditional switch statements with old language versions</Title>
    <PullRequestDescription>Fixes #32806
This was a "forward compatibility" bug, where new compilers would accept code in old language versions that the older compilers would not have accepted.</PullRequestDescription>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>32808</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Bad code for consecutive interface type tests with a when clause in a switch</Title>
    <PullRequestDescription>Fixes #32774

@dotnet/roslyn-compiler May I please have a couple of reviews for this bad code fix targeting preview 3?
</PullRequestDescription>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>09/02/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>32771</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Merge master into features/nested-stackalloc</Title>
    <PullRequestDescription>
    </PullRequestDescription>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>32449</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Make array Range indexer expression an rvalue</Title>
    <PullRequestDescription>Fixes #31889</PullRequestDescription>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>31851</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Include the member name in the error message when one attempt to explicitly implement an interface event in an interface</Title>
    <PullRequestDescription>This is my attempt to fix #19034</PullRequestDescription>
    <CreatedDate>17/12/2018</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>31787</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Force cancellation if switching to UI thread completed after cancellation request</Title>
    <PullRequestDescription>This issue was discovered by @jasonmalinowski while investigating #30661.

To ensure the issue does not affect other code, the changes in 2c85db1c were audited and updated to ensure code does not continue executing after a cancellation request.

Fixes #30661</PullRequestDescription>
    <CreatedDate>14/12/2018</CreatedDate>
    <ClosedDate>22/12/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>31634</PullRequestID>
    <RepoID>1</RepoID>
    <Title>fixed re-enterance bug in async operation listener.</Title>
    <PullRequestDescription>basically we are calling SetResult inside of a lock and since we used regular lock which allows re-enterance, we sometimes ran arbitary code under lock which re-entered async operation listener and mess everything up.

changed to non re-enterance lock so that it explicitly throws if re-enterance happens.

and make sure call SetResult from other thread (out side of the lock).</PullRequestDescription>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>12/12/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>31433</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Update CompilerServerLogger.cs</Title>
    <PullRequestDescription>[CHANGED] Removed the filepath from the filename of the log. The loggingFileName could be "C:\Users\user\build" which means that the second string in Path.Combine generates to "server.C:\Users\user\build.log" and that will be combined with the path once again leading to a full file path of: "C:\Users\user\build\server.C:\Users\user\build.log" and I dont think thats legal on Windows.</PullRequestDescription>
    <CreatedDate>29/11/2018</CreatedDate>
    <ClosedDate>04/12/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>31129</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Restore flow graph produced for existing switch statements</Title>
    <PullRequestDescription>Fixes #28634</PullRequestDescription>
    <CreatedDate>12/11/2018</CreatedDate>
    <ClosedDate>28/11/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>31082</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Track nullable state in try statements</Title>
    <PullRequestDescription>Fixes #30561</PullRequestDescription>
    <CreatedDate>09/11/2018</CreatedDate>
    <ClosedDate>13/11/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>30889</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Gracefully handle project systems not giving us a file path</Title>
    <PullRequestDescription>We previously didn't throw if a project system refused to give us a file path for the project file itself. In my refactoring, this accidentally switched over to a Marshal.ThrowExceptionForHR, which is now causing us to crash on at least Visual Studio Tools for Office projects. Put this back for now.

Ultimately, after this "fix" we're back to the behavior described in dotnet/rosyn#30429: we won't crash, but we won't have a project file for the project.</PullRequestDescription>
    <CreatedDate>31/10/2018</CreatedDate>
    <ClosedDate>06/11/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>30796</PullRequestID>
    <RepoID>1</RepoID>
    <Title>fix for PerfWatsonHang: microsoft.visualstudio.languageservices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetProjectAnalysisSummary</Title>
    <PullRequestDescription>### Customer scenario
Hangs happens sometimes during Edit-and-continue scenarios

### Bugs this fixes
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/705591

### Workarounds, if any
None

### Risk
Low

### Performance impact
Should improve: remove hangs

### Is this a regression from a previous update?
Not exactly, we try to fix issues with asynchronous interaction between Debugger and Roslyn. There were NFW, crashes, etc. Now we see hangs could happens as well.

### Root cause analysis
@AArnott  wrote:

&gt; 
&gt; !dumpasync turned up several potentially relevant async return stacks:
&gt; 
&gt; 0:000&gt; !dumpasync
&gt; 7f23a3ec &lt;0&gt; Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;ComputeDocumentDiagnosticAnalyzerDiagnosticsAsync&gt;d__14
&gt; .7f23a4ac &lt;0&gt; Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;ComputeDiagnosticsAsync&gt;d__7
&gt; ..7f23a58c &lt;1&gt; Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;GetDocumentAnalysisDataAsync&gt;d__4
&gt; ...7f012334 &lt;1&gt; Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+&lt;AnalyzeDocumentForKindAsync&gt;d__86
&gt; ....7f012404 &lt;0&gt; Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;&gt;c__DisplayClass32_1+&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d&lt;Microsoft.CodeAnalysis.Document&gt;
&gt; .....7f0124b8 &lt;0&gt; Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__34&lt;Microsoft.CodeAnalysis.Document,System.Object&gt;
&gt; ......7f01256c &lt;0&gt; Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;RunAnalyzersAsync&gt;d__32&lt;Microsoft.CodeAnalysis.Document&gt;
&gt; .......7ef3d83c &lt;1&gt; Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;ProcessDocumentAnalyzersAsync&gt;d__31
&gt; ........7ef3d914 &lt;0&gt; Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+HighPriorityProcessor+&lt;ProcessDocumentAsync&gt;d__15
&gt; .........7ef3d9fc &lt;0&gt; Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+HighPriorityProcessor+&lt;ExecuteAsync&gt;d__13
&gt; ..........04f2f288 &lt;2&gt; Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor+&lt;ProcessAsync&gt;d__12
&gt; 
&gt; 7f23a17c &lt;0&gt; Microsoft.CodeAnalysis.EditAndContinue.EditSession+&lt;&gt;c__DisplayClass35_0+&lt;&lt;GetDocumentAnalysisNoLock&gt;b__0&gt;d
&gt; 7f23a32c &lt;1&gt; Microsoft.CodeAnalysis.EditAndContinue.RudeEditDiagnosticAnalyzer+&lt;AnalyzeSemanticsAsync&gt;d__4
&gt; 
&gt; The UI thread is blocked on:
&gt; 17 012fedc8 1e84724b Microsoft_VisualStudio_LanguageServices_ni!Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetProjectAnalysisSummary(Microsoft.CodeAnalysis.Project)+0x5a
&gt; Which is synchronously blocking on the result of an async method with .ConfigureAwait(false) on its only await, so it has to be that the awaited Task didn’t complete. This Task came from a Roslyn-style AsyncLazy&lt;T&gt; that was initialized with an anonymous delegate defined within GetDocumentAnalysisNoLock. So that anonymous delegate must not have finished executing, and sure enough, we see its async state machine in the !dumpasync results above. Its state field is 0, so it’s the first await in that anonymous delegate that didn’t resume. The fact that that state machine isn’t shown as a continuation of another means that the await is on a method that doesn’t have an async modifier, and sure enough: its call to AsyncLazy.GetValueAsync is a method that merely returns a Task. But that AsyncLazy appears to be initialized with GetBaseActiveStatementsAsync as its value factory, and that method does use the async modifier. Since (if we assume AsyncLazy&lt;T&gt; is not faulty) that value factory hasn’t completed, I expect to find an async state machine in the !dumpasync output for that method. But I don’t see one. It certainly started, because we’re awaiting its result, so it must have already completed and the problem is elsewhere – maybe in a continuation, perhaps within AsyncLazy&lt;T&gt; itself?
&gt; 
&gt; So I drill more into that state machine that I do have:
&gt; 
&gt; 7f23a17c &lt;0&gt; Microsoft.CodeAnalysis.EditAndContinue.EditSession+&lt;&gt;c__DisplayClass35_0+&lt;&lt;GetDocumentAnalysisNoLock&gt;b__0&gt;d
&gt; 
&gt; And I find the local that is holding the TaskAwaiter that was awaited on:
&gt; 
&gt; 0:000&gt; !DumpVC /d 20c96ebc 7f23a198
&gt; Name:        System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter[[Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementsMap, Microsoft.CodeAnalysis.Features]]
&gt; MethodTable: 20c96ebc
&gt; EEClass:     206ce750
&gt; Size:        16(0x10) bytes
&gt; File:        C:\WINDOWS\Microsoft.Net\assembly\GAC_32\mscorlib\v4.0_4.0.0.0__b77a5c561934e089\mscorlib.dll
&gt; Fields:
&gt;       MT    Field   Offset                 Type VT     Attr    Value Name
&gt; 20cb310c  4003725        0 ...alysis.Features]]  0 instance 7f239fdc m_task
&gt; 71e4216c  4003726        4       System.Boolean  1 instance        0 m_continueOnCapturedContext
&gt; 
&gt; The task itself has state flags of (integer) 33555520, which is WaitingForActivation. So, the task being awaited is not complete. Not really any surprise there. But why isn’t it? 
&gt; Looking at the AsyncLazy whose value is being awaited for (92ffce20), I can see it’s active, that it wants to cache the result, but it hasn’t got one yet. It’s a fairly complicated class that I’m not familiar with, so I’m going to hold off digging deeper till someone more familiar with the class has a chance to inspect it to see if they can quickly surmise what might have malfunctioned here.
&gt; 
&gt; My only other question is about the really tall return stack in the !dumpasync output. It has to do with analyzers, which at least sounds possibly related to the GetDocumentAnalysisNoLock method. Is it possibly that there is some odd dependency between these two? 
&gt; 
&gt; 7f23a3ec &lt;0&gt; Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;ComputeDocumentDiagnosticAnalyzerDiagnosticsAsync&gt;d__14
&gt; 
&gt; If there is, that method is waiting on some semantic analysis from DiagnosticIncrementalAnalyzer+Executor.



### How was the bug found?
Watson
</PullRequestDescription>
    <CreatedDate>26/10/2018</CreatedDate>
    <ClosedDate>29/10/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>30596</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Delete "dead" comment.</Title>
    <PullRequestDescription>Fixes #30543</PullRequestDescription>
    <CreatedDate>18/10/2018</CreatedDate>
    <ClosedDate>22/10/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>30587</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure that the compilers produce double.NaN values in IEEE canonical form.</Title>
    <PullRequestDescription>Fixes #30439
</PullRequestDescription>
    <CreatedDate>18/10/2018</CreatedDate>
    <ClosedDate>29/10/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>30209</PullRequestID>
    <RepoID>1</RepoID>
    <Title>fixed DebugType ArgumentNullException in CommandLineArgumentReader</Title>
    <PullRequestDescription>in the situation where DebugType is mising and the DebugSymbols property is set to true when loading project information using CommandLineArgumentReader, the TryGetValue method of the s_debugTypeValues dictionary would throw an exception


reproduceable using the following method on the attached solution:

```csharp
        public static async Task ReproduceDebugTypeError()
        {
            var workspace = Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.Create();
            var solution = await workspace.OpenSolutionAsync(@"C:\Repros\ProjectLoadErrorOnMissingDebugTypeRepro\ProjectLoadErrorOnMissingDebugTypeRepro.sln");
        }
```

[ProjectLoadErrorOnMissingDebugTypeRepro.zip](https://github.com/dotnet/roslyn/files/2427898/ProjectLoadErrorOnMissingDebugTypeRepro.zip)
</PullRequestDescription>
    <CreatedDate>28/09/2018</CreatedDate>
    <ClosedDate>09/10/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>29591</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix temp creation with `in` parameters</Title>
    <PullRequestDescription>There's a variety of cases in the compiler where we need to store an
expression into a temporary variable, e.g. to sequence side effects
in the right order. This code was not adjusted to deal with `in`
parameters, so it exhibited various pathologies.

The first case is the simplest -- sometimes when using the "explicit in"
modifier on an argument, the temp creation routine would simply crash.

The other cases are more subtle and mostly have to do with whether or
not the temp is created as a ref local or regular local. This is
specific to the "implicit in", where the "in" keyword is not mentioned
on the argument. In this case, the semantics for the call should be that
the argument is passed by-ref without storing to a copy unless
absolutely necessary. Absolutely necessary in this case is defined as 1)
the argument is an rvalue or 2) the argument requires a conversion to
the parameter type.

A lot of this knowledge was already present in CodeGen, but not available
in lowering, so I've pulled out the HasHome helper to Binding, as I felt that
was the best place for the common code.

Fixes #29371 </PullRequestDescription>
    <CreatedDate>30/08/2018</CreatedDate>
    <ClosedDate>12/09/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>29569</PullRequestID>
    <RepoID>1</RepoID>
    <Title>EnC should not allow adding explicit interface implementation methods </Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/29145

Notes: 
1. Renaming (including changing which interface the method implements) and deleting the method are already prohibited
2. VB does not have similar issues because each method in an interface must be explicitly implemented</PullRequestDescription>
    <CreatedDate>28/08/2018</CreatedDate>
    <ClosedDate>29/08/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>29517</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Do not eliminate conditional branch if it falls through to a different exception handler.</Title>
    <PullRequestDescription>Fixes #29481.</PullRequestDescription>
    <CreatedDate>24/08/2018</CreatedDate>
    <ClosedDate>05/09/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>29221</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure we have no `null` positions in source parameter symbols.</Title>
    <PullRequestDescription>No tests are added specifically for this fix, as the new assertions would be thrown on many existing tests.
Fixes #28862 

@dotnet/roslyn-compiler May I please have a couple of reviews for this tiny bug fix?
</PullRequestDescription>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>12/08/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28667</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix crash for assignable ref this on RHS of assignment</Title>
    <PullRequestDescription>Fixes #26457

cc @dotnet/roslyn-compiler</PullRequestDescription>
    <CreatedDate>19/07/2018</CreatedDate>
    <ClosedDate>27/07/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28382</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix System.ArgumentOutOfRangeException in FindLeafNodeAndPartner</Title>
    <PullRequestDescription>Fixes [https://developercommunity.visualstudio.com/content/problem/283001/fatal-crash-moving-code-into-if-block-while-paused.html](https://developercommunity.visualstudio.com/content/problem/283001/fatal-crash-moving-code-into-if-block-while-paused.html)
 
@cston  and @tmat please let me know if you have any ideas for unit tests for the case.

It looks like the only callee of the method expects that the rightNode can be null. Therefore, I think that changing it to the opt-scenario is valid.</PullRequestDescription>
    <CreatedDate>09/07/2018</CreatedDate>
    <ClosedDate>10/10/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28313</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Reject base.Method() calls inside restricted types, because that requires boxing</Title>
    <PullRequestDescription>Fixes #27049</PullRequestDescription>
    <CreatedDate>05/07/2018</CreatedDate>
    <ClosedDate>07/07/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28310</PullRequestID>
    <RepoID>1</RepoID>
    <Title>In region analysis, recover gracefully from zero-width nodes.</Title>
    <PullRequestDescription>Fixes #26028

This fixes a crash in debug builds caused by a slightly too aggressive assertion.

@dotnet/roslyn-compiler Please review this smallest possible (1 character) bug fix. I am hoping to get this into 15.8.
</PullRequestDescription>
    <CreatedDate>05/07/2018</CreatedDate>
    <ClosedDate>16/07/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28252</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Track enclosing symbol in data flow analysis, which might be a field or property.</Title>
    <PullRequestDescription>Code used to assume it was (and typed it as) a method.
Fixes #19845
Fixes #27969

@dotnet/roslyn-compiler May I please have a couple of reviews?

&lt;details&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

Code containing a reference to a property in an initializer undergoes region analysis. The compiler crashes.

### Bugs this fixes

Fixes #19845
Fixes #27969

### Workarounds, if any

None known.

### Risk

Low. This is a localized correction that widens the type of a field so that we can track the enclosing symbol when it is not a method.

### Performance impact

None expected.

### Is this a regression from a previous update?

Probably.

### Root cause analysis

### How was the bug found?

Customer reported.

### Test documentation updated?

N/A

&lt;/details&gt;
</PullRequestDescription>
    <CreatedDate>03/07/2018</CreatedDate>
    <ClosedDate>03/07/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28250</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Added more tests to ref assignment to invalid expressions</Title>
    <PullRequestDescription>Closes #28238
Responds to additional feedback from #28118

cc @dotnet/roslyn-compiler for review.
cc @agocke for original feedback.</PullRequestDescription>
    <CreatedDate>02/07/2018</CreatedDate>
    <ClosedDate>07/07/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28217</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Enable refactorings which were unintentionally removed by 'none' severity</Title>
    <PullRequestDescription>### Customer scenario

A customer creates a .editorconfig file with `none` severity for rules they do not wish to enforce. After updating to Visual Studio 2017 version 15.8 Preview 3, some manual refactorings related to these rules stop working as well. The impacted refactorings are:

* Use implicit type
* Use explicit type
* Use expression body
* Use block body

### Bugs this fixes

N/A

### Workarounds, if any

Update the .editorconfig to specify `silent` instead of `none`.

### Risk

The risk is relatively low.

### Performance impact

None relative to 15.8 Preview 2 and earlier. The refactoring is now evaluated in the same manner and locations it was prior to the change in meaning of `none` severity in .editorconfig.

### Is this a regression from a previous update?

Yes, introduced by #27220.

### Root cause analysis

Currently we test the diagnostic analyzers separately from the refactorings, even when the two are operating on the same underlying feature in code. Each set of tests assumes behavior about the other in order to test the remaining cases. #27720 caused the analyzer to no longer operate under one of these scenarios where the refactoring tests continued to assume the diagnostic would provide a code fix.

The ideal fix is implementing a new test strategy that enables multiple analyzers and/or code fixes known to operate on the same body of code, and make assertions about the combined impact from the user's perspective. These assertions would more accurately reflect the behavior of the application in production, and detect two specific situations that are currently undetected by tests:

1. Tests would fail if the analyzer stopped providing a code fix and the refactoring was not updated to offer it (and vice versa)
2. Tests would fail if the analyzer started offering a code fix and the refactoring was not updated to exclude it (and vice versa)

I have filed #28216 to improve this situation in the future.

### How was the bug found?

Dogfooding.

### Test documentation updated?

No.
</PullRequestDescription>
    <CreatedDate>29/06/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28206</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Produce errors on ref-assignment to byval parameters</Title>
    <PullRequestDescription>Fixes #28117 </PullRequestDescription>
    <CreatedDate>28/06/2018</CreatedDate>
    <ClosedDate>03/07/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28181</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Lower expressions of in arguments to correct temp locals</Title>
    <PullRequestDescription>Fixes #27831 </PullRequestDescription>
    <CreatedDate>28/06/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28118</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ref-assigning to array elements should produce an error</Title>
    <PullRequestDescription>Fixes #28087 </PullRequestDescription>
    <CreatedDate>26/06/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28070</PullRequestID>
    <RepoID>1</RepoID>
    <Title>removing NWF at GetActiveStatements</Title>
    <PullRequestDescription>Targeting Dev16 because it should not have a customer impact.

### Customer scenario

On edit-and-continue scenario, an error happen on the debugger side. The debugger handles the error and returns a error code. Roslyn throws a NFW in case of error and sometimes even with errorCode == 0.
It is totally unnecessary to do so because the error was handled above and the NFW does not help at all.

Depending on the error code we should either skip the statement or cancel the EnC session.

### Bugs this fixes
VSO 619868 and VSO 626747 

### Workarounds, if any
None

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
No

### How was the bug found?
Watson analysis

Tagging @r-ramesh for review</PullRequestDescription>
    <CreatedDate>22/06/2018</CreatedDate>
    <ClosedDate>27/08/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28060</PullRequestID>
    <RepoID>1</RepoID>
    <Title>VenusCommandFilter/AbstractVsTextViewFilter uses incorrect buffer whe…servicing into 15.7</Title>
    <PullRequestDescription>Copy of #26956 against dev15.7.x

### Customer scenario

**Steps to Reproduce**:

1.  Try to debug a CSHTML file with some C# code
2.  Hover over on a variable with C# object.

**Expected Behavior**:
See object type description and value.

**Actual Behavior**:
See object type description but no value.

### Bugs this fixes
Partially fixes: https://github.com/dotnet/roslyn/issues/26873
and https://devdiv.visualstudio.com/DevDiv/_workitems/edit/635108

### Workarounds, if any
No

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
No

### Root cause analysis
This error was there for a long time but as we heard appeared only in 15.7 when VS changed its approach to communication with Roslyn for Quick Info Data Tips. Likely, it previously used other approach.

The root cause that this code is on the boundary between Roslyn and VS and we do not have enough unit test coverage for this.

### How was the bug found?
Customer feedback (VS Feedback)</PullRequestDescription>
    <CreatedDate>21/06/2018</CreatedDate>
    <ClosedDate>28/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>28034</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix breaking change in fixed AddressOf expressions</Title>
    <PullRequestDescription>Fixes #27945

* First commit brings back the old PR.
* Second one fixes the breaking change and adds tests.
* Third one just renames the API along with the tests. Reason is below:

`IsNonMoveableVariable()` is confusing AND incorrect. The name indicates that such variables/expressions cannot be moved during runtime, but it does return true for things that can be moved. One example is the breaking change. A pointer field of a type can be moved, but the compiler/language rules allow it.

Renaming to `ExpressionRequiresFixing()` indicates the intention of the compiler in a more straight-forward way. It will always return whether some expression needs to be fixed (by a `fixed` statement) or not. Tests were updated accordingly.</PullRequestDescription>
    <CreatedDate>20/06/2018</CreatedDate>
    <ClosedDate>27/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27944</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Revert "Fixed error messages around fixed fields (#27424)"</Title>
    <PullRequestDescription>Reverts #27424

This caused a build break for the following scenario:

```csharp
using System;
public unsafe sealed class PinnedStreamReader
{
    public unsafe byte* GetPointer(int position)
    {
        return (&amp;bufferStart[position]);
    }
 	
    byte* bufferStart;
}
```

It now produced: `error CS0212: You can only take the address of an unfixed expression inside of a fixed statement initializer`
We should investigate this and bring back the fix, without breaking additional scenarios.</PullRequestDescription>
    <CreatedDate>17/06/2018</CreatedDate>
    <ClosedDate>18/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27924</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Check receiver escape scope for invocation expressions</Title>
    <PullRequestDescription>Fixes #27772 </PullRequestDescription>
    <CreatedDate>15/06/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27883</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Produce errors on ref-like in arguments that may compromise stack safety rules</Title>
    <PullRequestDescription>Fixes #27357 </PullRequestDescription>
    <CreatedDate>15/06/2018</CreatedDate>
    <ClosedDate>28/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27882</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ref-like type parameters can return safely to external scope by ref</Title>
    <PullRequestDescription>Fixes #27874 
Fixes #27972</PullRequestDescription>
    <CreatedDate>15/06/2018</CreatedDate>
    <ClosedDate>28/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27809</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Use a pattern-specific diagnostic for pointer types.</Title>
    <PullRequestDescription>Fixes #18727

@agocke @cston Could you please review this small bug fix?
/cc @dotnet/roslyn-compiler 
</PullRequestDescription>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>18/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27803</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Copy escape scope of pattern locals from source expressions</Title>
    <PullRequestDescription>Fixes #27218 </PullRequestDescription>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27802</PullRequestID>
    <RepoID>1</RepoID>
    <Title>servicing fix for CLR_EXCEPTION_System.NullReferenceException_80004003_Microsoft.VisualStudio.InteractiveWindow.dll into dev15.7</Title>
    <PullRequestDescription>This is a copy of https://github.com/dotnet/roslyn/pull/26910 but targeting `dev15.7.x` instead of `master`

The original fix is applied in Dev15.8 and verified there.

### Customer scenario

Visual Studio closes or restarts and attempts to close and restart Roslyn which attempts to do the same with Interactive Host. Interactive Host attempts to send a message that it is closing back to Roslyn. However, Roslyn disappears just before. This is a race condition.

### Bugs this fixes
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/514822

### Workarounds, if any
No

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
No

### Root cause analysis
We haven't considered all possible timing combinations happening between threads.

### How was the bug found?
Customer reports (Watson)</PullRequestDescription>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>26/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27763</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Reporting errors on foreach ref/readonly declarations in async/iterator methods</Title>
    <PullRequestDescription>Fixes #26585</PullRequestDescription>
    <CreatedDate>12/06/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27758</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Add exception handling for erasing XML stream</Title>
    <PullRequestDescription>This showed up as a common crash path in Watsons. The exception
is usually that another process is holding onto the file.</PullRequestDescription>
    <CreatedDate>12/06/2018</CreatedDate>
    <ClosedDate>19/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27652</PullRequestID>
    <RepoID>1</RepoID>
    <Title>When a recursive pattern has no explicit type and acts on a nullable,</Title>
    <PullRequestDescription>ensure we test for null *and* convert to the underlying type.
Fixes #27321

@cston @agocke @dotnet/roslyn-compiler May I please have a couple of reviews of this very small bug fix?</PullRequestDescription>
    <CreatedDate>08/06/2018</CreatedDate>
    <ClosedDate>08/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27537</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Stop NGENing System.Net.Http and dependencies</Title>
    <PullRequestDescription>This is failing NGEN in official builds, as binding redirects to dependencies are not generated correctly.
We don't actually use/load that assembly in any way, so let's stop NGENing it.

cc @jaredpar @tannergooding @jasonmalinowski </PullRequestDescription>
    <CreatedDate>06/06/2018</CreatedDate>
    <ClosedDate>07/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27484</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Revert #25047 - [SQLite] Bump and use byte[] variants added to blob_open for performance</Title>
    <PullRequestDescription>Reverts #25047 as it is causing NGen issues in official builds.
We need to consolidate different versions of that binary that ship into VS.

cc @tannergooding can you please review?</PullRequestDescription>
    <CreatedDate>05/06/2018</CreatedDate>
    <ClosedDate>06/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27424</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fixed error messages around fixed fields</Title>
    <PullRequestDescription>Fixes #26688 
Fixes #26743 </PullRequestDescription>
    <CreatedDate>04/06/2018</CreatedDate>
    <ClosedDate>15/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27411</PullRequestID>
    <RepoID>1</RepoID>
    <Title>bug fix: don't optimize interpolations when in an expression lambda</Title>
    <PullRequestDescription>Interpolated strings should not be optimized to string concatenations when in an expression lambda.

This PR fixes this bug, which was introduced by #26612 (an optimization implemented in 15.8).

</PullRequestDescription>
    <CreatedDate>04/06/2018</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27279</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Validate full path of file instead of file name in parsing /resource args</Title>
    <PullRequestDescription>Fixes #27045 

The original bug is that the file name was checked instead of the full path. This makes the `FileInfo` constructor consider the execution path as the base path for the (relative) file name.

This change has no tests associated, as I talked with a couple of people on the team, and I believe this case is exteremely hard to put in a unit test, as the test needs to move the executed tests/compiler somewhere long enough to repro, and the scenario is corner case enough I don't think it is worth modifying the test harness at this point.</PullRequestDescription>
    <CreatedDate>31/05/2018</CreatedDate>
    <ClosedDate>07/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>27030</PullRequestID>
    <RepoID>1</RepoID>
    <Title>ToBadExpression() checking incorrect HasAnyErrors API</Title>
    <PullRequestDescription>Fixes #26516 
Fixes #26978

Bound nodes have two APIs to check for errors:
* `HasErrors` which is a fast flag that is set during creating the bound node (if an obvious semantic error). It does not guarentee that there are not other syntactical errors associated with the node.
* `HasAnyErrors` is slower, and used during binding to do a full check on including associated syntax nodes.

When calling the API `Binder.ToBadExpression()`, the caller should expect the returned `BoundBadExpression` to have `HasErrors` as true. However, as an optimization, this method checks the node if it `HasAnyErrors`, and returns it unchanged if so. Because of this mismatch, it will incorrectly return a node with `HasErrors=false` and `HasAnyErrors=true`, which violates the contract.

cc @dotnet/roslyn-compiler </PullRequestDescription>
    <CreatedDate>21/05/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26956</PullRequestID>
    <RepoID>1</RepoID>
    <Title>VenusCommandFilter/AbstractVsTextViewFilter uses incorrect buffer whe…</Title>
    <PullRequestDescription>### Customer scenario

**Steps to Reproduce**:

1.  Try to debug a CSHTML file with some C# code
2.  Hover over on a variable with C# object.

**Expected Behavior**:
See object type description and value.

**Actual Behavior**:
See object type description but no value.

### Bugs this fixes
Partially fixes: https://github.com/dotnet/roslyn/issues/26873

### Workarounds, if any
No

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
No

### Root cause analysis
This error was there for a long time but as we heard appeared only in 15.7 when VS changed its approach to communication with Roslyn for Quick Info Data Tips. Likely, it previously used other approach.

The root cause that this code is on the boundary between Roslyn and VS and we do not have enough unit test coverage for this.

### How was the bug found?
Customer feedback (VS Feedback)</PullRequestDescription>
    <CreatedDate>18/05/2018</CreatedDate>
    <ClosedDate>18/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26918</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure that expression variables (improperly) declared in a case expression are captured in bound nodes.</Title>
    <PullRequestDescription>Fixes #26896
Note that this fix is temporary, made via changes to code that is deleted in the recursive-patterns feature branch.
The bug naturally won't exist in the C# 8 code base due to pattern-matching changes.

@AlekseyTs @dotnet/roslyn-compiler May I please have a couple of reviews of this bug fix to unblock dataflow work?
</PullRequestDescription>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>20/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26915</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Produce errors on out variables declared as ref locals</Title>
    <PullRequestDescription>Fixes #26418

Approved from @dotnet/roslyn-compat-council 
cc @dotnet/roslyn-compiler </PullRequestDescription>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>16/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26910</PullRequestID>
    <RepoID>1</RepoID>
    <Title>fix for CLR_EXCEPTION_System.NullReferenceException_80004003_Microsoft.VisualStudio.InteractiveWindow.dll (master)</Title>
    <PullRequestDescription>This is a copy of https://github.com/dotnet/roslyn/pull/26770 but targeting `master` instead of `dev15.7.x`

### Customer scenario

Visual Studio closes or restarts and attempts to close and restart Roslyn which attempts to do the same with Interactive Host. Interactive Host attempts to send a message that it is closing back to Roslyn. However, Roslyn disappears just before. This is a race condition.

### Bugs this fixes
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/514822

### Workarounds, if any
No

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
No

### Root cause analysis
We haven't considered all possible timing combinations happening between threads.

### How was the bug found?
Customer reports (Watson)</PullRequestDescription>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>18/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26815</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Produce errors on emitting attributes using default constructor of structs</Title>
    <PullRequestDescription>Fixes #19394

Note: This is such a corner case that I chose to produce that error on all attributes (regardless of being optional or not) instead of crashing. This can be relaxed in the future if needed.
I also believe that getting an error about a user-defined system struct not being a class is better than having the type in your compilation, and compiling successfully without emitting the attribute.</PullRequestDescription>
    <CreatedDate>12/05/2018</CreatedDate>
    <ClosedDate>18/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26770</PullRequestID>
    <RepoID>1</RepoID>
    <Title>fix for CLR_EXCEPTION_System.NullReferenceException_80004003_Microsoft.VisualStudio.InteractiveWindow.dll</Title>
    <PullRequestDescription>### Customer scenario

Visual Studio closes or restarts and attempts to close and restart Roslyn which attempts to do the same with Interactive Host. Interactive Host attempts to send a message that it is closing back to Roslyn. However, Roslyn disappears just before. This is a race condition.

### Bugs this fixes
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/514822

### Workarounds, if any
No

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
No

### Root cause analysis
We haven't considered all possible timing combinations happening between threads.

### How was the bug found?
Customer reports (Watson)</PullRequestDescription>
    <CreatedDate>10/05/2018</CreatedDate>
    <ClosedDate>15/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26753</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Permit a parenthesized expression as the first operand of a switch expression</Title>
    <PullRequestDescription>Fixes #26584

@cston @agocke @dotnet/roslyn-compiler May I please have a couple of reviews for this tiny bug fix?
</PullRequestDescription>
    <CreatedDate>10/05/2018</CreatedDate>
    <ClosedDate>12/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26720</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Implement IDiscardSymbol.Equals and GetHashCode</Title>
    <PullRequestDescription>Fixes #25829

@jcouv @AlekseyTs Please review this tiny bug fix.
/cc @dotnet/roslyn-compiler 
</PullRequestDescription>
    <CreatedDate>08/05/2018</CreatedDate>
    <ClosedDate>10/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26629</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Recover from `Deconstruct` binding error.</Title>
    <PullRequestDescription>Fixes #26613

@dotnet/roslyn-compiler May I please have a couple of reviews for this crash fix that may be useful for Build?
</PullRequestDescription>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26481</PullRequestID>
    <RepoID>1</RepoID>
    <Title>This fixes a crash while typing a positional pattern.</Title>
    <PullRequestDescription>This fixes a crash found while typing in the IDE. It is a tiny bug fix.
Fixes #26467

@jcouv @agocke @cston @dotnet/roslyn-compiler May I please have a couple of reviews?
</PullRequestDescription>
    <CreatedDate>28/04/2018</CreatedDate>
    <ClosedDate>29/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26425</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Do not report unused using/imports if not processing doc comments.</Title>
    <PullRequestDescription>Also silently process doc comments when parsing them so we can report unused usings.
Fixes #2773
</PullRequestDescription>
    <CreatedDate>26/04/2018</CreatedDate>
    <ClosedDate>03/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26390</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Correct the generated code for a null check on a type parameter that may be a value type.</Title>
    <PullRequestDescription>Fixes #26387

@cston @agocke Please review this tiny pattern-matching bug fix for 15.8.
@dotnet/roslyn-compiler </PullRequestDescription>
    <CreatedDate>25/04/2018</CreatedDate>
    <ClosedDate>25/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26368</PullRequestID>
    <RepoID>1</RepoID>
    <Title>`git update-index --chmod=+x build.sh` to fix Ubuntu build.</Title>
    <PullRequestDescription>Fixes #26001</PullRequestDescription>
    <CreatedDate>24/04/2018</CreatedDate>
    <ClosedDate>25/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26361</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Use completion item InsertionText in the debugger, even before any non-debugger completion sessions have run</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/24112

This uncovered a weird issue in how completion services are used / shared between the normal editor and debugger scenarios. https://github.com/dotnet/roslyn/issues/26394 tracks a fix for that larger issue, while this PR addresses the immediate concern of uninitialized data.

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

Escrow Template
==================

### Customer scenario

The customer uses completion in the debugger (Watch window, etc.) before ever using completion in the regular editor. Items like `List&lt;&gt;` that are supposed to commit as just `List` will commit as `List&lt;&gt;`, and you then have to go back and clean it up.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/24112

### Workarounds, if any

Either
1. Run completion in the regular editor one time
2. Allow the incorrect code to be inserted by completion and then go clean it up before proceeding

### Risk

The risk of this change is pretty low. We're making sure a cache is populated when it is first needed.

### Performance impact

Basically none. No normal scenarios are impacted, and in the case of debugger-completion-before-editor-completion, we do a little bit of mef work when the completion list is shown where we didn't before, but that's necessary for correctness.

### Is this a regression from a previous update?

No

### Root cause analysis

The architecture of this partially lazily initialized type relies on an assumption that isn't being met currently. 

### How was the bug found?

Ad hoc testing </PullRequestDescription>
    <CreatedDate>24/04/2018</CreatedDate>
    <ClosedDate>10/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26345</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Inaccessible extension methods should not be considered eligible candidates.</Title>
    <PullRequestDescription>Fixes #25813

@dotnet/roslyn-compiler Please review this small bug fix.

Note that there is a slight regression in the quality of our diagnostics for inaccessible extension methods. I think this is unavoidable unless we go to the two-pass technique used to diagnose problems with non-extension methods (first look for viable methods, then if that fails try again looking for anything, viable or not).

There is also a slight regression in one `SemanticModel` case caused by `SemanticModel` attempting to compensate for the fact that we don't take a two-pass approach. I've filed https://github.com/dotnet/roslyn/issues/26344 for that, as fixing it probably requires some deep refactoring of the `SemanticModel` and binding of overload resolution. Since the cost and risk of that is high and the benefits small, I do not consider that worth doing in this bug fix.
</PullRequestDescription>
    <CreatedDate>23/04/2018</CreatedDate>
    <ClosedDate>27/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26287</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Extend lifetime of switch arm pattern variables to permit them to be shared in the decision dag.</Title>
    <PullRequestDescription>Fixes #26274

@cston @agocke @dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>20/04/2018</CreatedDate>
    <ClosedDate>28/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26248</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Produce correct diagnostics on implicit operator conversions for stackalloc expressions</Title>
    <PullRequestDescription>Fixes #26195
cc @dotnet/roslyn-compiler for reivew.</PullRequestDescription>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26154</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Support pointers of unmanaged type parameters in method type inference</Title>
    <PullRequestDescription>Fixes #25654 

@dotnet/roslyn-compiler for review.</PullRequestDescription>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>21/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26130</PullRequestID>
    <RepoID>1</RepoID>
    <Title>__arglist cannot have an argument passed by 'in' or 'out'</Title>
    <PullRequestDescription>Fixes #22455

cc @VSadov @dotnet/roslyn-compiler </PullRequestDescription>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>17/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26088</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Permit an array of tuple type in an is-type expression or in a pattern.</Title>
    <PullRequestDescription>Fixes #24975
Also move some suggestions from PROTOTYPE comments to the test plan.

@cston @agocke @dotnet/roslyn-compiler Please review this parsing change for pattern-matching.
</PullRequestDescription>
    <CreatedDate>10/04/2018</CreatedDate>
    <ClosedDate>18/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>26019</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix parser regression in pattern switch parsing</Title>
    <PullRequestDescription>`when` is not permitted as a pattern variable name at the top level
Fixes #25999
Fixes #26000
This regression only occurred on the `features/recursive-patterns` branch.

@cston @agocke Please review this small bug fix.
@dotnet/roslyn-compiler FYI
</PullRequestDescription>
    <CreatedDate>08/04/2018</CreatedDate>
    <ClosedDate>18/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>25903</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Produce errors on invalid pdbpath supplied to compiler</Title>
    <PullRequestDescription>### Customer scenario

In case a path was supplied to the compiler with an invalid character, we use that path without reporting errors and stamp it into the embedded pdb within the assembly. We should detect that and report the appropriate error.

### Bugs this fixes

Fixes #23525

### Workarounds, if any

None.

### Risk

This is a breaking change, where instead of allowing invalid paths, we provide appropriate errors.
@dotnet/roslyn-compat-council will be notified and consulted before merging.

### Performance impact

Negligible.

### Is this a regression from a previous update?

No

### Root cause analysis

Validation was not in place. Tests are now added.

### How was the bug found?

Reported by a team member on GitHub.</PullRequestDescription>
    <CreatedDate>03/04/2018</CreatedDate>
    <ClosedDate>05/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>25893</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Partial methods implementation should match declaration parameter ref kinds</Title>
    <PullRequestDescription>### Customer scenario

Customers should not be able to implement partial methods having parameters with a different ref kind than the definition. The compiler should produce diagnostics and prevent that. Currently, the following invalid code passes without errors:

```csharp
partial class C {
    partial void M(in int i);
    partial void M(ref int i) {}  
}
```

Since this is a breaking change, @dotnet/roslyn-compat-council will be notified and will get approval before merging.

### Bugs this fixes

Fixes #25399

### Workarounds, if any

None.

### Risk

Low risk. This is producing an error in a corner case scenario where code shouldn't have been allowed in first place.

### Performance impact

Negligible.

### Is this a regression from a previous update?

It is a breaking change.

### How was the bug found?

Reported on GitHub by a contributor.

cc @dotnet/roslyn-compiler for review.</PullRequestDescription>
    <CreatedDate>02/04/2018</CreatedDate>
    <ClosedDate>05/04/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>25432</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix #25211.</Title>
    <PullRequestDescription>Don't place MEF Export attribute on an abstract class since that causes MEF composition errors (importing constructor on abstract class not found).

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

VSMac can't compose due to VSMEF composition errors. VS for Windows seems to be able to survive these, but for us it's fatal, and hence, blocking. VSMac needs to be able to update to 15.7 Roslyn bits.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/25211

### Workarounds, if any

Turn off crashing on composition errors in VSMac (we'd really like to not do this, as in our world we need to be acutely aware of all composition problems).

### Risk

Low. Fix is easy to verify and should have no repercussions.

### Performance impact

None

### Is this a regression from a previous update?

Yes, regressed about a month ago.

### Root cause analysis

Roslyn needs to have a test that composes and verifies VSMEF had no composition errors. Highly recommended.

### How was the bug found?

VSMac adoption

### Test documentation updated?

Not needed.

&lt;/details&gt;
</PullRequestDescription>
    <CreatedDate>12/03/2018</CreatedDate>
    <ClosedDate>15/03/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>25209</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Localization test failures Return FormattableString for BoundTupleExpression.Display</Title>
    <PullRequestDescription>### Customer scenario

Running unit test `OverloadResolutionTests.GenericInferenceOnInErrTuples` on non English machines failed due to localization issues. The root cause was that `BoundTupleExpression.Display` returned a string instead of a localizable string. The PR implements the solution proposed by @AlekseyTs in #24603. 
As noted in #24603 `BoundStackAllocArrayCreation.Display` a few lines down needs also to be fixed. This will be done once the fix `BoundTupleExpression.Display` is reviewed as being valid.

### Bugs this fixes

Fixes #24603 

### Workarounds, if any

Ignore test failures.

### Risk

The proposed solution requires to allow `FormattableString` types in `DiagnosticInfo.Arguments`. This might lead to unwanted code patterns in respect to DiagnosticInfo and localizability in the future.

### Performance impact

Low.

### Is this a regression from a previous update?

### Root cause analysis

Localization wasn't tested before.

### How was the bug found?

Contributor reported.

### Test documentation updated?

No.
</PullRequestDescription>
    <CreatedDate>04/03/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>25131</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Check generic construction diagnostics for stackalloc to span conversions</Title>
    <PullRequestDescription>Closes #25086
Closes #25038

There is a bug in C# 15.5, where during the conversion of a `stackalloc` expression to a `Span&lt;T&gt;` object creation, the type parameter construction and constraints matching were not checked during binding.

Fixing this for 15.7 is a breaking change, because an expression of `stackalloc T [count]` would be legal even if `T` was not legal to initialize `Span&lt;T&gt;` with. We would previously emit IL even if it would cause run time exceptions. do believe that the scope is small enough for us to take the breaking change though.</PullRequestDescription>
    <CreatedDate>28/02/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>25070</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix code that violated the (!Alive || !Reported) control-flow-analysis invariant.</Title>
    <PullRequestDescription>### Customer scenario

An assertion error in the compiler arises when using a debug build of Roslyn and analyzing control-flow in code in which there is a "fall through" error in a switch statement.

### Bugs this fixes

Fixes #25043

### Workarounds, if any

None needed (customers do not usually use a Debug build).

### Risk

Tiny. The fix is the deletion of code that simply violates asserted invariants.

### Performance impact

Deletion of code could, if anything, speed up the compiler.

### Is this a regression from a previous update?

No; longstanding bug not previously detected.

### Root cause analysis

Unusual combination of conditions not hit in existing tests.

### How was the bug found?

Customer reported.

### Test documentation updated?

N/A

@dotnet/roslyn-compiler May I please have a couple of reviews of this ultra-tiny bug fix?
</PullRequestDescription>
    <CreatedDate>27/02/2018</CreatedDate>
    <ClosedDate>27/02/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>25035</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Remove Binder.CheckFeatureAvailability that uses useSiteDiagnostics</Title>
    <PullRequestDescription>Fixes #25028

cc @jcouv @AlekseyTs 
@dotnet/roslyn-compiler for review</PullRequestDescription>
    <CreatedDate>24/02/2018</CreatedDate>
    <ClosedDate>28/02/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>24909</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Support PointerElementAccess in value escape rules</Title>
    <PullRequestDescription>Fixes #24776</PullRequestDescription>
    <CreatedDate>17/02/2018</CreatedDate>
    <ClosedDate>05/03/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>24761</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Permit selecting an instance from a type in a sub-expression in nameof(...)</Title>
    <PullRequestDescription>Fixes #20600

@dotnet/roslyn-compiler May I please have two reviews of this tiny bug fix?</PullRequestDescription>
    <CreatedDate>10/02/2018</CreatedDate>
    <ClosedDate>16/02/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>24547</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix `is` and pattern-matching behavior in presence of implicit UD conversion</Title>
    <PullRequestDescription>Fix `is` and pattern-matching behavior in presence of implicit UD conversion
and also an explicit reference conversion between the same types.
User-defined conversions should never be considered for `is` and pattern-matching.

### Customer scenario

See #24522 

### Bugs this fixes

Fixes #24522

### Workarounds, if any

Casting the left-hand-side to `object` is often a work-around.

### Risk

Low, as the fix is quite localized.

### Performance impact

Should be slight performance improvement, as we now only check built-in conversions for certain type-check operations.

### Is this a regression from a previous update?

Yes. C#6 did not have this bug.

### Root cause analysis

We did not realize that it is possible for an implicit user-defined operator to be present when an explicit reference conversion applies.

We now have tests for the ways that symptoms can arise.

### How was the bug found?

Customer reported.

### Test documentation updated?

N/A
</PullRequestDescription>
    <CreatedDate>31/01/2018</CreatedDate>
    <ClosedDate>06/02/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>24489</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Don't freeze compilation when getting diagnostics for a single tree</Title>
    <PullRequestDescription>Fixes #24351</PullRequestDescription>
    <CreatedDate>26/01/2018</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>24464</PullRequestID>
    <RepoID>1</RepoID>
    <Title>fixing AccessViolationException on ReadMetadataHeader</Title>
    <PullRequestDescription>### Customer scenario

The user debugging process crashed during the execution https://github.com/dotnet/roslyn/blob/f9ebce0a3056646064cf52208eb40487b80b8aca/src/ExpressionEvaluator/Core/Source/ExpressionCompiler/DkmUtilities.cs#L63 in the debugger.  The pointer created just above 
https://github.com/dotnet/roslyn/blob/f9ebce0a3056646064cf52208eb40487b80b8aca/src/ExpressionEvaluator/Core/Source/ExpressionCompiler/DkmUtilities.cs#L61 points to a bad block.

The debugger crashes with 
CLR_EXCEPTION_System.AccessViolationException_80004003_System.Reflection.Metadata.dll!System.Reflection.Metadata.MetadataReader.ReadMetadataHeader

### Bugs this fixes

VSO 187805

### Workarounds, if any

No

### Risk

Low

### Performance impact
No

### Is this a regression from a previous update?
No

### Root cause analysis
This happens on the edge between Roslyn, Visual Studio and user debugging processes. There are various interactions between processes with different timings. Not all of them were considered.

### How was the bug found?
Watson</PullRequestDescription>
    <CreatedDate>26/01/2018</CreatedDate>
    <ClosedDate>02/02/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>24265</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Limit compiler server pipe name length</Title>
    <PullRequestDescription>
### Customer scenario

The current scenario: on Mac sometimes the compiler server can be left
spinning in an exception loop and non-responsive and the build silently
falls back to slower csc/vbc operation.

On MacOS pipes are implemented using Unix domain sockets. Unix domain
sockets must have a valid file path for their endpoint. The best place
is in the temp folder. Unfortunately, domain sockets on Unix also have a
very small path length limit of 104 characters. In addition, Mac temp
paths can be very long since they include randomly generated characters
from the OS. In total, this means that Roslyn has barely 50 characters
worth of space for its pipe identifiers.

This change cuts down on the bytes of the SHA256 hash used. This shouldn't
affect the security of the pipe, since the hash isn't used as a security boundary,
but should fit the pipe name into the length limitations.

### Bugs this fixes

Fixes #24137 

### Workarounds, if any

On Mac, for your `dotnet build` process, set your TMP environment variable to a short path, like `/tmp`.

### Risk

Low. The path name itself is not semantically meaningful to Roslyn.

### Performance impact

This is a perf fix. Should improve perf quite a lot (&gt; 100% in my test).

### Is this a regression from a previous update?

No.

### Root cause analysis

This is a bug in a new feature that is caused by an OS peculiarity that only sometimes occurs
based on the user ID and randomized path generated by MacOS for the current session.

### How was the bug found?

First found by a developer when trying to repro a different bug, then customer reported.

</PullRequestDescription>
    <CreatedDate>16/01/2018</CreatedDate>
    <ClosedDate>18/01/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>24239</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix compiler server on CoreCLR and enable bootstrapping on CoreCLR build</Title>
    <PullRequestDescription>### Customer scenario

This PR fixes the CoreCLR compiler server on Windows and changes our bootstrap build to act as a test case. The bug in the compiler server was we were attempting to do user ID verification on CoreCLR on Windows, but those APIs are not available on CoreCLR, so this would always fail. This fix disables user ID verification and relies only on Windows pipe ACLs, which should be enough to ensure that only properly privileged users can connect.

### Bugs this fixes

Fixes #20900 and #24072

### Workarounds, if any

There are no workarounds for using the compiler server under CoreCLR on Windows.

### Risk

This change is substantially similar to what we do on Linux, so has already been given a fair amount of coverage. 

### Performance impact

This should make the compiler much faster on CoreCLR.

### Is this a regression from a previous update?

No.

### Root cause analysis

We didn't bootstrap using the compiler server on CoreCLR, which I've now added.

### How was the bug found?

Customer reported.
</PullRequestDescription>
    <CreatedDate>15/01/2018</CreatedDate>
    <ClosedDate>23/01/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>24108</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Use correct type parameter binder for local functions</Title>
    <PullRequestDescription>

### Customer scenario

Write a local function with an (incorrect) attribute reference 
on a type parameter of the local function. Then, below the
local function, hit Ctrl+Space to bring up completion. VS crashes.

### Bugs this fixes

Fixes #17814

### Workarounds, if any

Don't place attributes on type parameters of local functions, even by mistake.

### Risk

Low. We're already doing this for regular parameters, we just missed type parameters.

### Performance impact

None. An additional field access.

### Is this a regression from a previous update?

No. Present since shipping local functions in 15.0.

### Root cause analysis

This looks like simple oversight. The binder being used for type
parameters was retrieved from the binder factory since we didn't
explicitly pass one. For members this is correct since the binder
factory can be queried for top-level binders. This is not correct for
local functions because they use method body binders, which are not
accessible from the binder factory.

Mostly, this doesn't matter. The exception is when you try to
speculatively bind an attribute on a type parameter. Here, you need an
in-method binder and VS will crash if it's the wrong binder. This was
uncommon since attributes on type parameters are not permitted in local
functions, but VS should not crash.

Tests have been added for this case.

### How was the bug found?

Customer reported.
</PullRequestDescription>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>10/01/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>24049</PullRequestID>
    <RepoID>1</RepoID>
    <Title>MemberSemanticModel.GetBoundLambdaOrQuery should use GetAdjustedNodePosition helper to ensure proper handling of zero-length tokens at the beginning of a syntax node.</Title>
    <PullRequestDescription>Fixes #23883.

### Customer scenario

Steps to Reproduce:
Insert this code
```
        void method1()
        {
            if (method2())
                .Any(b =&gt; b.ContentType, out var chars)
            {
            }
        }
```
Hover over b.ContentType

Expected Behavior:
- Quick info shows (parameter) ? b over b
- and nothing over ContentType

Actual Behavior:
Visual Studio crashes when mouse is over either b or ContentType

### Bugs this fixes

#23883

### Workarounds, if any

None, except not doing repro steps.

### Risk

Low

### Performance impact

Low perf impact because no extra allocations/no complexity changes 

### Is this a regression from a previous update?

No.

### Root cause analysis

Unit-tests added.

### How was the bug found?

Customer reported 

</PullRequestDescription>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>05/01/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>24023</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Make sure 'in' is honored in cref parsers/completion lists</Title>
    <PullRequestDescription>### Customer scenario

`RefKind.In` is not honored in cref comments. This leads to:
1) methods with `in` parameters are populated as regular byval parameters.
2) compiler displays warnings when user manually writes `&lt;see cref="M(in int x)" /&gt;`

Note: API change will follow #22472

### Bugs this fixes

Fixes #23957 

### Workarounds, if any

None.

### Risk

Minimal. It is an addition to the parser/completion lists.

### Performance impact

Minimal. No complexity changes.

### Is this a regression from a previous update?

No.

### Root cause analysis

New feature. New tests were added to guard against possible future regressions.

### How was the bug found?

Customer comment on GitHub.

### Test documentation updated?

----
  </PullRequestDescription>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>10/01/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23930</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix two bugs in async lifting analysis which results in unnecessarily lifted locals.</Title>
    <PullRequestDescription>The first issue is that we did not properly track the unreachable state in lifting analysis. I believe we did so to work around a bug that has since been fixed.
The second issue is that an assignment in a conditional branch condition was not treated as conditional.

Since VB does not have an assignment expression, I do not have a repro for user locals, but the fix results in some temps no longer being unnecessarily lifted (as shown by changes in existing tests)

### Customer scenario

Async methods have more IL for their bodies, and more locals lifted, than necessary.

### Bugs this fixes

Fixes #13759

### Workarounds, if any

None known.

### Risk

The fix is simple. On the other hand, flow analysis is subtle and the reasons that we tracked unreachable state the way we did is lost in prehistory.

### Performance impact

Changes are simple and local, so no performance impact expected.

### Is this a regression from a previous update?

No.

### Root cause analysis

We do not have extensive testing for which locals are lifted in async code under what circumstances. Too much lifting is generally only a performance (not correctness) problem, so we did not prioritize it.

### How was the bug found?

Customer reported.

### Test documentation updated?

It would be good to add supporting test infrastructure and tests for which locals are lifted for various uses of language constructs. Once that is in place, we could add it as an item to check off for testing new features. This suggestion is recorded in #23929.
</PullRequestDescription>
    <CreatedDate>26/12/2017</CreatedDate>
    <ClosedDate>09/01/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23905</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Reject ref as an invalid modifier for accessors</Title>
    <PullRequestDescription>### Customer scenario

User typing `ref` before an accessor (like `add`, `remove`, `set`, and `get`), will cause the C# compiler to OOM. VS will hang until it eventually runs out of memory.

```csharp
public int Prop
{
    ref get {
```

### Bugs this fixes

Fixes #23833

### Workarounds, if any

None.

### Risk

Minimal. It is rejecting a certain keyword in the parser.

### Performance impact

Minimal.

### Is this a regression from a previous update?

Yes. This bug shipped with ref structs.

### Root cause analysis

With the introduction of `ref struct`s, `ref` was considered a valid modifier, but accessor modifiers were not adjusted as well.

### How was the bug found?

Customer report.

### Test documentation updated?

Yes.</PullRequestDescription>
    <CreatedDate>22/12/2017</CreatedDate>
    <ClosedDate>05/01/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23796</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ignore escape analysis for erroneous field access nodes</Title>
    <PullRequestDescription>### Customer scenario

Using fields or definitions with erroneous escape scope, in local statements will hit asserts in the C# compiler. or hang VS.

```csharp
using System;

namespace CSharp72TestApp
{
    public ref struct Point
    {
    }
    class Program
    {
        public static readonly Point rwp = new Point();

        static void PrintNormal()
        {
            var tmp = rwp;
        }
    }
}
```

### Bugs this fixes

Fixes #23627

### Workarounds, if any

None.

### Risk

Minimal. It is short circuiting erroneous symbols in the binder escape analysis.

### Performance impact

Minimal.

### Is this a regression from a previous update?

No. This bug shipped with ref structs.

### Root cause analysis

Using fields or definitions with erroneous escape scope will emit errors, but any uses of these symbols later will fail the checks done in the binder, causing asserts to fire or VS to NRE.

### How was the bug found?

Customer report.

### Test documentation updated?

---</PullRequestDescription>
    <CreatedDate>15/12/2017</CreatedDate>
    <ClosedDate>05/01/2018</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23728</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Pass in optional arguments by ref</Title>
    <PullRequestDescription>### Customer scenario

Not passing values to optional parameters of `RefKind.In` will emit invalid IL, causing runtime exceptions.

Code this fixes:

```C#
using System;

class Program
{
    static void Main()
    {
        // buffer overrun
        A(1);

        // throw NullReference or AccessViolation Exception
        B(1, 2);
    }

    static void A(in double x = 1, in string y = "") =&gt; Console.WriteLine(y);
    static double B(in float x, in float y, in float z = 1.0f) =&gt; x * y * z;

}
```

### Bugs this fixes

Fixes #23691

### Workarounds, if any

None.

### Risk

Low. This is fixing an already failing scenario.

### Performance impact

None.

### Is this a regression from a previous update?

This fixes a bug introduced by an earlier PR in the same release, and adds appropriate tests.

### Root cause analysis

An earlier change was made to distinguish between arguments passed with no modifier to an `in` parameter, and arguments passed explicitly by `in` at the call site. This change refactored the local rewriter, which introduced the bug. The compiler (now in master) ignores the refkind of optional parameters when trying to generate the values for non-existing arguments, and passes them by value.

### How was the bug found?

Customer reported on github.

### Test documentation updated?

--</PullRequestDescription>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>19/12/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23655</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Suggest stackalloc keyword in Span legal places</Title>
    <PullRequestDescription>### Customer scenario

C# 7.2 introduce safe stackalloc with the Span&lt;T&gt; struct. So stackalloc keyword should be listed in the IntelliSense window. The completion provider suggests other types/keywords (ex: `StackOverflowException`).

### Code this fixes:

![image](https://user-images.githubusercontent.com/15987992/34232826-0ecc4498-e597-11e7-84e3-6a4b149342de.png)

### Bugs this fixes

Fixes #23584

### Workarounds, if any

None.

### Risk

Low. This is suggesting an additional keyword. Tests were added.

### Performance impact

Minimal.

### Is this a regression from a previous update?

No.

### Root cause analysis

Was not implemented yet in 7.2.

### How was the bug found?

Customer reported on github.

### Test documentation updated?

--</PullRequestDescription>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>21/12/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23629</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Forbid 'default' as a case constant or a pattern.</Title>
    <PullRequestDescription>Has been reviewed by LDM and compat council.

### Customer scenario

The C# language design team wants to forbid the use of a default expression `default` (without the type between parens) as a constant pattern for pattern-matching, to make room for evolution of that feature in C# 8.0. We are treating this as a bug fix against the `default` literal feature that was introduced in C# 7.1, and as such we want to get the change in as soon as possible.

### Bugs this fixes

Fixes #23499

### Workarounds, if any

N/A

### Risk

Low, though there is a slight compat risk if people have already written code like `case default:`. We think that is unlikely, as it produced a warning before.

### Performance impact

Only trivial additional complexity in the compiler.

### Is this a regression from a previous update?

N/A

### Root cause analysis

We did not predict the future well enough. 😉 

### How was the bug found?

We discovered this while designing recursive patterns.

### Test documentation updated?

N/A

@dotnet/roslyn-compiler @jcouv Please review for 15.6
</PullRequestDescription>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>10/12/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23508</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Accept PE Operator Symbols having in parameters</Title>
    <PullRequestDescription>## Customer scenario

```csharp
// ref.dll
public class Test
 {
     public int Value { get; set; }
 
     public static int operator +(in Test a, in Test b)
     {
         return a.Value + b.Value;
     }
 }
 ```
```csharp
// main.exe
 class Program
 {
     static void Main(string[] args)
     {
         var a = new Test { Value = 3 };
         var b = new Test { Value = 6 };
 
         System.Console.WriteLine(a + b);
     }
 }
```

**Expected**: prints 9
**Actual**: CS0019: Operator '+' cannot be applied to operands of type 'Test' and 'Test'

## Bugs this fixes

Fixes devdiv bug 530136 ([feedback link](https://developercommunity.visualstudio.com/content/problem/156730/c-in-modifier-in-parameters-of-an-operator-method.html))

## Workarounds, if any

None needed

## Risk

Low.

## Performance impact

None.

## Is this a regression from a previous update?

No.

## Root cause analysis

 It was an implementation detail in how C# compiler imports symbols from other binaries. Now fixed.
The compiler would ignore operators that have parameters with any ref kind.

## How was the bug found?

Customer report.

## Test documentation updated?

No.</PullRequestDescription>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>10/12/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23414</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Make anonymous type's GetHashCode not depend on compilation environment</Title>
    <PullRequestDescription>We stop calling string.GetHashCode() at compile time and placing the value in the
generated code because that is not deterministic. Instead we use FNV1a hash code.

For VB, which does not have this bug, we update the implementation to use a more
reliable case-mapping method (see #2116)

### Customer scenario

Compile source code in two different compilation environments, expecting the result to be the same. But the generated GetHashCode varies from one to another because it depends on string.GetHashCode in the compilation environment. When compiling in an environment with [randomized string hashing](https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element), the compiler will produce a different assembly nearly every time.

### Bugs this fixes

Fixes #23020

### Workarounds, if any

Don't compile in different environments and expect deterministic compiler output.

### Risk

Very low. Replaces one hash code computation with another.

### Performance impact

Very low for the same reason.

### Is this a regression from a previous update?

No.

### Root cause analysis

We've been improving our determinism since we started working on it a couple of years ago. This particular issue was detected and diagnosed by a customer.

### How was the bug found?

Customer reported.

### Test documentation updated?

N/A

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>28/11/2017</CreatedDate>
    <ClosedDate>30/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23252</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Permit array of pointer type to be parsed wherever an array type is permitted</Title>
    <PullRequestDescription>**Customer scenario**

Use the `is` operator to test an expression to see if it is an array of some pointer type. This used to work in earlier compilers, but now produces a syntax error.

**Bugs this fixes:**

Fixes #23100

**Workarounds, if any**

None.

**Risk**

Very low. The fix is focused on the problematic scenarios.

**Performance impact**

None expected, as the change does only a tiny bit more work in unusual circumstances.

**Is this a regression from a previous update?**

No, but it is a regression from C# 6.

**Root cause analysis:**

The introduction of pattern-matching changed the way types are parsed. As a consequence, certain type syntax forms that were previously permitted were unintentionally forbidden by the change.

Generally speaking, we do not permit pointer types to be parsed in certain contexts that require a managed type. These contexts include an is-expression type test, pattern-matching scenarios and tuples. The parser was modified to forbid pointer specifiers in these contexts. However, an array of a pointer type is a managed type and should have been permitted. This bug fix permits parsing arrays of pointer types in these contexts even though pointer types themselves are not permitted. 

**How was the bug found?**

Customer-reported.

**Test documentation updated?**

N/A

@jcouv This affects tuple parsing. Could you please review, particularly the deconstruction test changes?
@agocke Please review.
@pdelvo I would love your feedback, please.
</PullRequestDescription>
    <CreatedDate>17/11/2017</CreatedDate>
    <ClosedDate>27/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23231</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure the operand of an is-pattern expression is evaluated.</Title>
    <PullRequestDescription>**Customer scenario**

Writing the expression `expr is var _` yields true without evaluating `expr` for its side-effects. It should evaluate `expr`.

**Bugs this fixes:**

Fixes #22619

**Workarounds, if any**

Change `_` to some otherwise unused identifier.

**Risk**

Very low. The fix is very focused on the particular scenario.

**Performance impact**

None. Does not change any algorithms of the compiler.

**Is this a regression from a previous update?**

No. This bug existed since pattern-matching was first introduced.

**Root cause analysis:**

The scenario is a little nonsensical, so we did not think to test it.

**How was the bug found?**

(Internal) customer reported.

**Test documentation updated?**

No.

-----------------
@dotnet/roslyn-compiler  Please review.
</PullRequestDescription>
    <CreatedDate>17/11/2017</CreatedDate>
    <ClosedDate>21/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23035</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix error message strings on conflicting parameter modifiers</Title>
    <PullRequestDescription>Fixes #22994

As part of reverting back ref-readonly parameters to be in parameters for the second time (went in #22424), the error message was using the incorrect modifier. Fixed the tests and the source code in this PR.</PullRequestDescription>
    <CreatedDate>07/11/2017</CreatedDate>
    <ClosedDate>10/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>23031</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Marshalling methods with `in` parameters should have [In] attribute</Title>
    <PullRequestDescription>Fixes #22641 

cc @dotnet/roslyn-compiler @tannergooding @jcouv</PullRequestDescription>
    <CreatedDate>06/11/2017</CreatedDate>
    <ClosedDate>16/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22856</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix scanning type arguments - they cannot contain attributes</Title>
    <PullRequestDescription>**Customer scenario**

When an object initializer contains an initializer for one item that is a less-than expression (`&lt;`), and a second item that is an index initializer, then the parser incorrectly interprets the `&lt;` as the start of a type argument list. For example, the following produces a syntax error:

``` c#
var x = new C { [0] = op1 &lt; op2, [1] = true };
```

**Bugs this fixes:**

https://github.com/dotnet/roslyn/issues/22830

**Workarounds, if any**

This bug can be worked around by parenthesizing the comparison expression.

**Risk**

Low. The change is tiny and focused on the scenario.

**Performance impact**

Tiny, possibly improving performance in scenarios of erroneous code.

**Is this a regression from a previous update?**

Yes, this fixes a recently introduced regression.

**Root cause analysis:**

This is an old bug exposed by changes in the disambiguation of type arguments.

**How was the bug found?**

Customer reported.

**Test documentation updated?**

N/A
</PullRequestDescription>
    <CreatedDate>26/10/2017</CreatedDate>
    <ClosedDate>07/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22779</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Do not suggest using implicit type for stackalloc initialization</Title>
    <PullRequestDescription>Fixes #22768

vso bug : https://devdiv.visualstudio.com/DevDiv/NET%20Developer%20Experience%20Productivity/_workitems/edit/517749

cc @sharwell @jcouv @dotnet/roslyn-ide </PullRequestDescription>
    <CreatedDate>19/10/2017</CreatedDate>
    <ClosedDate>03/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22717</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Support property generation for in arguments.</Title>
    <PullRequestDescription>Closes #22385
Looks like the used API is being renamed in #22472

@dotnet/roslyn-ide @jasonmalinowski for review.</PullRequestDescription>
    <CreatedDate>16/10/2017</CreatedDate>
    <ClosedDate>24/10/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22645</PullRequestID>
    <RepoID>1</RepoID>
    <Title>In parameters cannot have Out attributes</Title>
    <PullRequestDescription>Fixes #22640

@tannergooding @VSadov @jcouv @dotnet/roslyn-compiler  for code review
@jaredpar for ask mode approval</PullRequestDescription>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>16/10/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22614</PullRequestID>
    <RepoID>1</RepoID>
    <Title>ref and readonly structs Displayed in IDE</Title>
    <PullRequestDescription>Fixes #22564

@dotnet/roslyn-compiler @VSadov for code review.
@jaredpar for ask mode approval.
@dotnet/roslyn-ide for added IDE test.</PullRequestDescription>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>23/10/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22565</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Implement escape scopes for all types of local symbols</Title>
    <PullRequestDescription>Fixes #22206

cc @dotnet/roslyn-compiler: @cston @VSadov @cston for code review.
cc @jaredpar for ask mode approval.</PullRequestDescription>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>30/10/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22553</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Compiler API not to return [Obsolete] for IsByRefLikeTypes</Title>
    <PullRequestDescription>Fixes #22450
Replaces #22504

The fix here is to stop returning [Obsolete] from compiler APIs.

@VSadov @dotnet/roslyn-compiler @dotnet/roslyn-ide for code review
@jaredpar for ask mode approval</PullRequestDescription>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>11/10/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22480</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Suggest "in" for argument positions in IDE</Title>
    <PullRequestDescription>Fixes #22454

@jcouv / @jaredpar is master still targeting `15.5`? should this be rebased?
cc @dotnet/roslyn-compiler @dotnet/roslyn-ide </PullRequestDescription>
    <CreatedDate>03/10/2017</CreatedDate>
    <ClosedDate>03/10/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22458</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Report warning (always false) when testing null using pattern-is</Title>
    <PullRequestDescription>**Customer scenario**

If you have an expression `e is T`, where the expression `e` ends up being a constant null, the compiler reports that the expression is always false. But if you add an identifier after the type, the warning unexpectedly vanishes.

**Bugs this fixes:**

Fixes #20103

**Workarounds, if any**

N/A

**Risk**

Very low. We just add the missing diagnostic.

**Performance impact**

Only a trivial change to the execution path. Unlikely to be any measurable perf impact.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

We did not attempt to duplicate the warnings from one construct when implementing the other.

**How was the bug found?**

Customer reported.

**Test documentation updated?**

N/A

**Compatibility**

This would technically be a breaking change, as it adds a warning where there was none before. The compatibility council has been consulted and has approved this change.

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>01/10/2017</CreatedDate>
    <ClosedDate>11/10/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22414</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure partial method implementation is completed when needed</Title>
    <PullRequestDescription>**Customer scenario**

Place an attribute on a parameter of a partial implementation, where the attribute is the only thing that causes some using to be required. Then refactor "remove unnecessary usings". The bug is that the required using is removed.

**Bugs this fixes:**

Fixes #18348

**Workarounds, if any**

Don't place attributes on partial method implementation parameters.

**Risk**

Very low. The change is trivial.

**Performance impact**

Tiny. A small amount of additional logic is executed for partial methods.

**Is this a regression from a previous update?**

This has been a bug in Roslyn since VS2015.

**How was the bug found?**

Customer reported.

**Test documentation updated?**

N/A
</PullRequestDescription>
    <CreatedDate>29/09/2017</CreatedDate>
    <ClosedDate>01/10/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22335</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix inconsistencies in the way reachability is handled in pattern switch</Title>
    <PullRequestDescription>**Customer scenario**

Fixes inconsistencies in the way reachability is handled in pattern switch. The concept of reachability, which takes the value of the switch expression into account and can produce warnings, is separate from the concept of subsumption which takes the full set of patterns into account and can produce errors.

The new rule is: If a single case could handle all inputs, e.g. has the same constant value, a wildcard pattern, etc, then the default label is considered unreachable. By contrast, subsumption ignores the *value* of the switch expression.

**Bugs this fixes:**

Fixes #20210

**Workarounds, if any**

None.

**Risk**

Fairly low. This only affects the computation of warning diagnostics.

**Performance impact**

Little additional code in the normal case, and no additional allocations.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

This is an area of the specification that was poorly settled, and not well tested (mea culpa).

**How was the bug found?**

Customer reported.

**Test documentation updated?**

N/A

@agocke @AlekseyTs Please review this change to the handling of reachability for pattern switch.
</PullRequestDescription>
    <CreatedDate>26/09/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22307</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Modify CharacterInfo.BeginsBaseLiteral.</Title>
    <PullRequestDescription>Correcting a possible copy and paste error, should be `FULLWIDTH_LATIN_SMALL_LETTER_B`.
Small refactoring to give better chance of Jit in-lining in the common case especially, but both methods now have the chance.

**Customer scenario**
The customer type a boolean literal base integer value. 
eg
```vbnet
 &amp;b1 ' where the B is Fullwidth_Latin_Small_B
```
This would fail to compile.

**Bugs this fixes:**
In `CharacterInfo.BeginsBaseLiteral` the expression checks against `FULLWIDTH_LATIN_CAPITAL_B` twice.
[Link to Source](https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/Scanner/CharacterInfo.vb#L260)

**Workarounds, if any**
Using the Capital or the HalfWidth instance

**Risk**

`Low` change of constant used in comparision.

**Performance impact**
'NoiseLevel - Tiny`  change of constant. Refactored out the comparision into separate methods.
Those methods are tiny so highly likely to be jit-inlined. Rare parsng path.

**Is this a regression from a previous update?**

**Root cause analysis:**
External Contributor happened to be viewing that section of the codebase in their branch.

&gt; How did we miss it?  What tests are we adding to guard against it in the future?
Likely copy paste mistake. I've extended the unit tests to cover the full range of allowed characters.

**How was the bug found?** `ad hoc testing`

**Test documentation updated?** - Yes
</PullRequestDescription>
    <CreatedDate>24/09/2017</CreatedDate>
    <ClosedDate>21/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22285</PullRequestID>
    <RepoID>1</RepoID>
    <Title>IDE Features fix for code generation for ref-readonly</Title>
    <PullRequestDescription>Fixes #22242 - Implement Interface loses "ref readonly"
Fixes #22241 - Replace lambda with local function loses "ref readonly"
Fixes #22240 - Add Accessibility modifier removes "ref" from a ref struct
Fixes #22239 - Change Signature does not show "ref readonly" modifier on parameters
Fixes #22238 - Extract interface loses "ref readonly" on parameters and returns

I split this PR into two commits:
* One has all the refactoring (threading RefKinds through various APIs)
* Another for the tests, roughly one test file change per bug above.</PullRequestDescription>
    <CreatedDate>22/09/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22223</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Do not zero out "With" statement target expression locals referenced within a lambda.</Title>
    <PullRequestDescription>Fixes #16968.

@dotnet/roslyn-compiler Please review</PullRequestDescription>
    <CreatedDate>20/09/2017</CreatedDate>
    <ClosedDate>21/09/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>22039</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Do not emit PDB path in PE file if not generating PDB</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/21935

This regression was caused by this region of change: https://github.com/dotnet/roslyn/commit/b66f68c485fb1c6bbfa69c62490ff47d37d5dae5#diff-9ab09861519e8dfab2c0787cad46ab15L2412

In particular, before the change, if `pdbFilePath != null` and `pdbStreamProvider == null`, the resulting `pePdbPath == null`.

After the change, if `pePdbFilePath != null` and `pdbStreamProvider == null`, `pePdbFilePath == the_original_value`.

(conditions simplified a bit to make it more readable)

So, this PR fixes it up to keep the behavior before the change.

(Putting the PDB path in the PE file is keyed off that variable being null or not)

---

I don't know how to test this change. I have manually verified it works, but advice on how to unit-test this (and prevent further regressions) would be appreciated.</PullRequestDescription>
    <CreatedDate>11/09/2017</CreatedDate>
    <ClosedDate>26/09/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>21945</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix issue with merging parameters</Title>
    <PullRequestDescription>After merging https://github.com/dotnet/roslyn/pull/21673 and integrating it with the CLI, I discovered that `AppendTextUnquoted` has this documentation: `This method does not append a space to the command line before executing.`. This causes the first flag to merge with the `pathToTool`. (This doesn't happen on Windows, as the flag starts with `/`, and `one/two` is processed with `/two` as a flag, even though there's no space)

Ping @agocke @dotnet/roslyn-infrastructure - I don't think this is a full-out build break, as it should only be hit when `DOTNET_HOST_PATH` is defined (which won't happen until https://github.com/dotnet/cli/pull/7311 is merged), but I should probably have the squirrel regardless 😅)</PullRequestDescription>
    <CreatedDate>06/09/2017</CreatedDate>
    <ClosedDate>11/09/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>21916</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Do not specify /doc: when GenerateDocumentation=false</Title>
    <PullRequestDescription>Fixes https://github.com/dotnet/roslyn/issues/21371

Note that this is *VB-Only* (documentation is [linked in the issue thread](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties), search `GenerateDocumentation`).

Requesting review from the compiler team because that's what the issue is filed under (not sure if compiler or infra or what).</PullRequestDescription>
    <CreatedDate>05/09/2017</CreatedDate>
    <ClosedDate>14/09/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>21693</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fixed generating delegate constructor</Title>
    <PullRequestDescription>**Customer scenario**

Generate constructor refactoring generate delegate constructor with circular calls

**Bugs this fixes:**
Fixes #21692

**Risk**
Low

**Performance impact**

Low

**Is this a regression from a previous update?**

**How was the bug found?**

customer reported
</PullRequestDescription>
    <CreatedDate>23/08/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>21688</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fixed field name generation in Introduce constant field refactoring</Title>
    <PullRequestDescription>**Customer scenario**

Introduce constant field refactoring produce not compiled code if namespace name is equal to class name

**Bugs this fixes:**

Fixes #21687

**Risk**

Low

**Is this a regression from a previous update?**
No

**Root cause analysis:**
If namespace name equals to class name it produce not compiled code which can't be simplified

**How was the bug found?**

customer reported</PullRequestDescription>
    <CreatedDate>23/08/2017</CreatedDate>
    <ClosedDate>12/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>21667</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fixed variable name for Extract Local refactoring</Title>
    <PullRequestDescription>**Customer scenario**

Extract Local refactoring: variable name should be equal to value tuple field name

**Bugs this fixes:**

Fixes #21665

**Risk**
Low

**Performance impact**
Low

**Is this a regression from a previous update?**
No

**Root cause analysis:**

```GetExistingSymbols``` doesn't exclude tuple field names.

**How was the bug found?**

customer reported
</PullRequestDescription>
    <CreatedDate>22/08/2017</CreatedDate>
    <ClosedDate>06/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>21586</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix crash in VisualBasic.Binder.MemberLookup.AddLookupSymbolsInfoInTypeParameter when it is called with Cref TypeParameter.</Title>
    <PullRequestDescription>Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=410932.

The fix mimics the way C# compiler handles Cref TypeParameters in the similar API.

**Customer scenario**

Create new VB class library project 
 Paste the following code in Class1.vb
```
 Public Class FooBar
 Function Bar(Of T)() As T
 End Function

 ''' &lt;summary&gt;
 ''' Foo &lt;see cref="Bar(Of T)()" /&gt;
 ''' &lt;/summary&gt;
 Public Sub Foo()
 End Sub
 End Class
```
 Hover the cursor over "Bar" (for a couple of seconds) in Foo's see tag. VS crashes.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>17/08/2017</CreatedDate>
    <ClosedDate>17/08/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>21450</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Disallow calling generic local function with dynamic</Title>
    <PullRequestDescription>Resolves #21317.

After discussion with @agocke, we've decided to ban this scenario - allowing this requires local functions to be constructed dynamically at runtime, something we explicitly decided not to do for local functions.

@dotnet/roslyn-compat-council This is technically a breaking change, as code that used to compile no longer does so. However, the IL generated in this scenario was broken, and the assembly could never load (not even a case of "fails when the code is executed", but "fails immediately when the assembly itself loads")</PullRequestDescription>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>14/08/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>21258</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Correct the order of parameters to Version</Title>
    <PullRequestDescription>Fixes #21136

No behavior changes, as the order of parameters in the signature was incorrect as well. Manually verified all use sites do not use named arguments (all use sites are within the same file, in the same method).

Also quickly glanced over all calls to the Version ctor in Compilers.sln in non-test projects, and all of them are already correct.

@dotnet/roslyn-compiler this is *incredibly* easy to review :)</PullRequestDescription>
    <CreatedDate>02/08/2017</CreatedDate>
    <ClosedDate>02/08/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>20720</PullRequestID>
    <RepoID>1</RepoID>
    <Title>When producing character literals, surrogate characters should be escaped.</Title>
    <PullRequestDescription>**Customer scenario**

Use the Roslyn compiler APIs to produce a literal for a unicode character. The generated syntax should be correct (escaped). The bug is that the compiler produces a unicode surrogate directly into the generated program text.

**Bugs this fixes:**

Fixes #20693

**Workarounds, if any**

Client code that produces literals could have a special-case to work around the compiler bug.

**Risk**

Tiny, as the only effect is to handle this previously unhandled unicode category.

**Performance impact**

Tiny, if any, as it adds no new code paths.

**Is this a regression from a previous update?**

No, an old Roslyn bug only recently noticed.

**Root cause analysis:**

No test coverage for this category of unicode character in literals.

**How was the bug found?**

Customer reported.

@dotnet/roslyn-compiler May I please have a couple of reviews of this tiny bug fix?
</PullRequestDescription>
    <CreatedDate>07/07/2017</CreatedDate>
    <ClosedDate>31/07/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>20587</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fixes overload resolution regression with ValueTuple</Title>
    <PullRequestDescription>**Customer scenario**

The C# overload resolution tie-breaker involving a more specific type argument isn't respected for instances of ValueTuple. When such a scenario arises, the programmer get an ambiguity error on the invocation.

**Bugs this fixes:**

Fixes #20494
Adds a test for #20583

**Workarounds, if any**

The programmer can provide explicit type arguments to resolve the ambiguity.

**Risk**

Small. The fix is a very local workaround for the symptom. The underlying issue (ValueTuple instances are not recognized by the compiler as generic), may be addressed separately in a more extensive change.

**Performance impact**

Tiny or none.

**Is this a regression from a previous update?**

It is a regression in VS2017 versus VS2015.

**Root cause analysis:**

This is a symptom of our choice of internal representation for tuple types. I am separately looking at a more uniform change to address the underlying issue, which is that tuple types are not recognized by the compiler as generic.

**How was the bug found?**

Ad-hoc testing.

@dotnet/roslyn-compiler May I please have a couple of reviews of this tiny bug fix?
</PullRequestDescription>
    <CreatedDate>30/06/2017</CreatedDate>
    <ClosedDate>09/07/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>20578</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Report when a `void` value is the subject of a pattern-match</Title>
    <PullRequestDescription>**Customer scenario**

If the operand of a pattern-match is a void expression, and the pattern is a wildcard, the compiler produces code that crashes.

**Bugs this fixes:**

Fixes #20452

**Workarounds, if any**

Avoid that pattern of code.

**Risk**

Very low, as the fix is a simple local fix for the scenario.

**Performance impact**

None to tiny.

**Is this a regression from a previous update?**

No. The bug has been present since VS2017 when pattern-matching was introduced.

**Root cause analysis:**

We did not test this scenario.

**How was the bug found?**

Customer reported.

@dotnet/roslyn-compiler May I please have two reviews of this trivial bug fix?</PullRequestDescription>
    <CreatedDate>30/06/2017</CreatedDate>
    <ClosedDate>05/07/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>20403</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Provide diagnostics when using ref extension methods with lang version before 7.2</Title>
    <PullRequestDescription>Fixes #20395
cc @VSadov @dotnet/roslyn-compiler </PullRequestDescription>
    <CreatedDate>22/06/2017</CreatedDate>
    <ClosedDate>29/06/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>20378</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Don't crash when an interface is not implemented by the HostObject</Title>
    <PullRequestDescription>Partially resolves #18633, in that instead of crashing when the host object doesn't implement the `I{Vbc,Csc}HostObject` interface, we silently continue. This also fixes another error in the same file, but that fix is more concrete in that there was already logic for handling the error, it just wasn't getting hit (RCWForCurrentContext should throw a NullArgException in its constructor if passed null).

The decision of if we should silently eat the error or explicitly error out (for the first case) is up for debate. The only behavior from something correctly implementing from the interface is to suppress "/sqmsessionguid" during design time builds (if the HostObject does not implement the interface, it will not suppress the flag, which seemed to be the original intent of the code).

The issue still remains of how we got into this state in the first place (with HostObject not implementing `ICscHostObject` - possibly issues with assembly version mismatches), but this at least resolves the NRE.

Ping @agocke as they helped me work through this.</PullRequestDescription>
    <CreatedDate>21/06/2017</CreatedDate>
    <ClosedDate>13/07/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>20337</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix error message when passing in parameters by ref</Title>
    <PullRequestDescription>Fixes #18477 

Added tests for permutations for all ref kinds, even the ones that fail to parse, like `Method(ref readonly x)`.</PullRequestDescription>
    <CreatedDate>20/06/2017</CreatedDate>
    <ClosedDate>29/06/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>19868</PullRequestID>
    <RepoID>1</RepoID>
    <Title>reenable "optimize is_null on nullable&lt;t&gt;"</Title>
    <PullRequestDescription>This reverts commit a267219857618a5566c8f6b376243f77bc0ae84b.

**Customer scenario**

Better performance for checking `foo is null` patterns where `foo` is a `Nullable&lt;T&gt;`.

**Bugs this fixes:**

https://github.com/dotnet/roslyn/issues/13247

**Workarounds, if any**

Use old syntax.

**Risk**

Low.

**Performance impact**

None

**Is this a regression from a previous update?**

No

</PullRequestDescription>
    <CreatedDate>30/05/2017</CreatedDate>
    <ClosedDate>08/06/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>19737</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix code gen for pattern switch with constant expression</Title>
    <PullRequestDescription>**Customer scenario**

Use new pattern-based switch constructs in which the switch expression is a constant.

**Bugs this fixes:**

* Fix code gen for pattern switch with constant expression
Fixes #19731

* Add instrumentation for pattern switch with constant expression
Fixes #17090

* Incorrect code for generic pattern switch on a constant expression
Fixes #19734

**Workarounds, if any**

Don't use a constant switch expression.

**Risk**

Low. The scenarios are fairly focused, and regression tests now exist for the problematic scenarios.

**Performance impact**

None expected. No significant change in the complexity of the relevant compiler code.

**Is this a regression from a previous update?**

Yes, #19731 is a regression from the last update.

**Root cause analysis:**

We are catching this now as we add coverage for the recently added support for switching on generic types.

**How was the bug found?**

Development testing.
</PullRequestDescription>
    <CreatedDate>23/05/2017</CreatedDate>
    <ClosedDate>05/06/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>19670</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Emit tuple names on property setter parameters</Title>
    <PullRequestDescription>Method implementation copy-translated from `SynthesizedParameterSymbol.cs`.

Note, I did the work of testing the logic in the if statement added/etc. (what happens when System.String is missing, etc.), before realizing that the exact functionality was already being tested elsewhere in `AttributeTests_Tuples.vb`.

Fixes #16829

I'm not sure if this will meet the bar - while it's incorrect metadata we're emitting, both commandline and IDE scenarios seem to work without this fix. I believe we currently take the tuple name off of the property symbol (this fix is adding the names to the underlying `set_` method). Let me know if it does have a chance of meeting the bar, and I'll fill out the template.

Ping @jcouv as they helped me figure out testing the lack of core types.</PullRequestDescription>
    <CreatedDate>19/05/2017</CreatedDate>
    <ClosedDate>27/05/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>19573</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Use the V7 switch binder if the switch contains any new features (VS crash fix)</Title>
    <PullRequestDescription>**Customer scenario**

In a project set to use language version 6, start typing a switch statement inside an existing method, where auto-brace-insertion is off and there is a var-declared variable following the switch being typed. The problem occurs at this stage of typing:
``` c#
switch (e)
{
    case // cursor here

var x = y;
M(x);
```
After typing `case`, VS crashes.

**Bugs this fixes:**

Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?_a=edit&amp;id=388743
and numerous Watson crashes linked to that.

**Workarounds, if any**

Turn on automatic brace insertion.

**Risk**

Low. The fix is to bind code that appears to use C# 7 constructs as if they were written for C# 7 (after giving an error about feature not being available in C# 6). This is a single-line change.

**Performance impact**

No performance impact expected. New code paths are only exercised for erroneous code.

**Is this a regression from a previous update?**

Yes, VS did not crash in similar scenarios in VS2015 and earlier. Problem was introduced in VS2017 with the introduction of pattern-matching.

**Root cause analysis:**

Compiler code author assumed that syntax errors would preclude binding. But that is not the case; we bind even erroneous code for IDE scenarios.

**How was the bug found?**

Watson failures in customer use.
</PullRequestDescription>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>22/05/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>19413</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix crash in is operator used with tuples</Title>
    <PullRequestDescription>**Customer scenario**

Certain patterns of erroneous pattern-matching were not previously diagnosed. Specifically, when you match a nullable of one integral type with a declaration pattern of another integral type, there was no error. We introduce this error. This is a breaking change in a scenario related to the recently-released pattern-matching feature, so we would like to take the break as soon as possible so that customers do not rely on being able to write the erroneous code. We do not believe the pattern of code is very likely to arise in practice.

This PR also fixes a crash in the existing `is` operator when used with tuple types.

**Bugs this fixes:**

* Fixes crash in `is` operator used with tuples
Fixes #19310

* Matching an expression of type `byte?` with a pattern of type `int` should not be allowed
Fixes #19151

* Unify subsumption implementations
Fixes #19273

* Greatly improved code gen for value type pattern match
Fixes #16129
Fixes #18944
Fixes #14252

**Workarounds, if any**

N/A

**Risk**

The purpose of the change is to reduce future risk. Also, because we now combine what were previously three separate implementations, we have one third fewer places there could be bugs.

**Performance impact**

None expected, as there are only small changes to the code paths taken during compilation.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

For the crash, we did not test scenarios involving mixing tuples with the existing `is` operator.

**How was the bug found?**

I found the crash reviewing the existing code while preparing the fix for the other two issues.
</PullRequestDescription>
    <CreatedDate>10/05/2017</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>19281</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix a crash in the parser due to ParseStatementCore returning null</Title>
    <PullRequestDescription>**Customer scenario**

The following program text causes the parser to crash.

``` c#
class A { void M() { label: public
```

There are other ways to hit the failure. We've been seeing 1-2 Watson hits per day. The symptom is a VS crash.

**Bugs this fixes:**

https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?_a=edit&amp;id=266237

**Workarounds, if any**

None. This is a fatal VS crash without giving the user a hint what happened.

**Risk**

Tiny. One-line change.

**Performance impact**

None.

**Is this a regression from a previous update?**

Regression from VS2015, and a side-effect of a parser overhaul when local functions were added.

**Root cause analysis:**

It is possible this would have been detected earlier if we developed some randomized parser fuzz tests.

**How was the bug found?**

Analysis of Watson dump.

**Description of change**

In ParseLabeledStatement, when `ParseStatementCore` returns null for the embedded statement, we build an empty statement node (and give an error). Other call sites appear to have been adapted already.

@jaredpar @dotnet/roslyn-compiler May I please have a couple of reviews for this teeny tiny crash fix?
</PullRequestDescription>
    <CreatedDate>04/05/2017</CreatedDate>
    <ClosedDate>05/05/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>19023</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Guard access to shared resource WordSimilarityChecker.s_pool</Title>
    <PullRequestDescription>## Ask Mode

**Customer scenario**

Repeatedly use Navigate To. Visual Studio will eventually crash.

**Bugs this fixes:**

N/A

**Workarounds, if any**

None.

**Risk**

Low.

**Performance impact**

Essentially none. If the access was concurrent previously then it was also erroneous.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Race condition in access to a shared variable. Should have been caught during code review but we missed it.

**How was the bug found?**

Found while manual testing.
</PullRequestDescription>
    <CreatedDate>26/04/2017</CreatedDate>
    <ClosedDate>27/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18965</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Repair an InvalidCastException caused by unnecessarily tight coupling.</Title>
    <PullRequestDescription>**Customer scenario**

Use pattern-matching when compiling (or compiling against) a core library that lacks Nullable`1. Compiler crashes.

**Bugs this fixes:**

Fixes #18811

**Workarounds, if any**

Don't do that.

**Risk**

Tiny. The bug was in error recovery code.

**Performance impact**

None expected.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

The improper tight coupling (depending on particular implementation types) bug has been latent, undetected, for years. We just found a symptom.

**How was the bug found?**

Customer reported.
</PullRequestDescription>
    <CreatedDate>24/04/2017</CreatedDate>
    <ClosedDate>01/05/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18933</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Misleading constant diagnostics</Title>
    <PullRequestDescription>**Bugs this fixes:**

#18750 

Replaced WRN_FilterIsConstant warning with three separate warnings with different suggestions. 
* `WRN_FilterIsConstantTrue`: suggest removing the filter
* `WRN_FilterIsConstantFalse`: suggest removing the catch clause
* `WRN_FilterIsConstantRedundantTryCatch`: suggest removing the try-catch block, if the catch filter expression is 'false'/'default' and there is only one catch clause for the try-catch block. 
</PullRequestDescription>
    <CreatedDate>23/04/2017</CreatedDate>
    <ClosedDate>13/11/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18922</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Add missing box instruction in pattern match</Title>
    <PullRequestDescription>**Customer scenario**

Switch on a value type and have a case using a declaration pattern to a type that it could box to.

**Bugs this fixes:**

Fixes #18859

**Workarounds, if any**

Don't do that. This would be an unusual pattern of code to find, since the pattern would always match. You could just use an assignment instead of a switch.

**Risk**

Low. This just adds a needed box instruction.

**Performance impact**

None expected.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

We simply didn't test this combination of features.

**How was the bug found?**

Customer reported.
</PullRequestDescription>
    <CreatedDate>22/04/2017</CreatedDate>
    <ClosedDate>03/05/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18920</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix #18905 - No error reported for an expression bodied accessor in abstract event</Title>
    <PullRequestDescription>**Customer scenario**

Create an abstract class which contains an abstract event, then add custom accessors (add/remove) to this event. Accessors should be declared using expression body.

**Bugs this fixes:**

#18905

**Risk**

Low, the current logic isn't changed.

**Performance impact**

Low, because added code that just gets `SyntaxNode` from `ExpressionBody` property.

**Is this a regression from a previous update?**

No, this bug existed as soon as the expression-body syntax was accepted for an event.

**Root cause analysis:**

`SourceCustomEventAccessorSymbol` doesn't check for `ExpressionBody` property. Updated tests.

**How was the bug found?**

Customer reported.
</PullRequestDescription>
    <CreatedDate>22/04/2017</CreatedDate>
    <ClosedDate>28/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18756</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Classify pattern-matching temp as long-lived</Title>
    <PullRequestDescription>**Customer scenario**

Use a switch in an async method, where the switch uses any new features introduced in C# 7.0.

**Bugs this fixes:**

Fixes #18257

**Workarounds, if any**

None known.

**Risk**

Small, as there is no change to code generation, but rather the classification of variables affecting the PDB.

**Performance impact**

Tiny, if any. Thee is only a slight change to which (existing) compiler code path is taken for these scenarios.

**Is this a regression from a previous update?**

No, the pattern-matching switch was new in C# 7.0.

**Root cause analysis:**

We did not test the interaction of pattern-matching with async.

**How was the bug found?**

Customer reported.
</PullRequestDescription>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>19/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18662</PullRequestID>
    <RepoID>1</RepoID>
    <Title>SemanticModel should cache synthesized bound statements in a separate cache in order to avoid “polluting” the regular cache.</Title>
    <PullRequestDescription>Fixes #10604.
Fixes #16306.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>13/04/2017</CreatedDate>
    <ClosedDate>15/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18619</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure proper handling of a line-break following an incomplete string interpolation.</Title>
    <PullRequestDescription>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=405887.
The error recovery wasn’t including the line-break into interpolated string, yet wasn’t creating proper statement terminator token for it. The change ensures that the line-break is treated as part of the string for the purpose of the error recovery, this is what would happen if the interpolation was properly terminated with ‘}’ before the end of the line.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>12/04/2017</CreatedDate>
    <ClosedDate>14/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18521</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix a bug in code gen for switch on byte or ushort</Title>
    <PullRequestDescription>Fixes #18188

The bug arose because of an interaction of this line (new in VS2017)

``` c#
                _builder.EmitIntConstant(endConstant.Int32Value - startConstant.Int32Value);
```

in `SwitchIntegralJumpTableEmitter` and an incorrect implementation of `Int32Value` for constants of type `ushort` and `ubyte`, which is recorded as a separate bug in https://github.com/dotnet/roslyn/issues/18579. Specifically, the implementation causes improper sign extension of what should be treated as an unsigned value.

We never caught this before because we didn't rely on it. Constant folding in the compiler goes through another (redundant) code path that gets the padding vs sign extension correct. Because this is a serious regression in the compiler, I am hoping we can include this fix is some upcoming patch at our earliest opportunity. Therefore I have included a simple, local fix for the symptom, while leaving the larger issue of `ConstantValue` to be dealt with in a later larger change. 

@VSadov @dotnet/roslyn-compiler May I please have a couple of reviews of this simple fix to a nasty bug?
</PullRequestDescription>
    <CreatedDate>07/04/2017</CreatedDate>
    <ClosedDate>14/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18407</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Make sure errors are consistent when providing null vs empty key files during signing</Title>
    <PullRequestDescription>@dotnet/roslyn-compiler 
Fixes #11497</PullRequestDescription>
    <CreatedDate>03/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18265</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Properly handle forwarded types in PEModuleSymbol.GetWellKnownType.</Title>
    <PullRequestDescription>Fixes #18092.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>04/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18263</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure MethodToStateMachineRewriter.VisitScope properly rewrites local symbols referenced by the node.</Title>
    <PullRequestDescription>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=401335.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>03/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18228</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Diagnose a void value in a tuple.</Title>
    <PullRequestDescription>We also fix a crash in error recovery due to the fact that there is
no conversion from void to void.
Fixes #17921 

@dotnet/roslyn-compiler Please review this crash fix in handling `void` in a tuple.
</PullRequestDescription>
    <CreatedDate>27/03/2017</CreatedDate>
    <ClosedDate>14/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>18206</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Handle missing variable declaration in foreach loop in VariablesDeclared</Title>
    <PullRequestDescription>Fixes #17971 

@dotnet/roslyn-compiler Please review this small bug fix.
</PullRequestDescription>
    <CreatedDate>27/03/2017</CreatedDate>
    <ClosedDate>19/04/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17916</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Forbid a void assignment to a discard.</Title>
    <PullRequestDescription>Fixes #17674 

Note that this is under review of @dotnet/roslyn-compat-council and integration will be held until a final approval.

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>16/03/2017</CreatedDate>
    <ClosedDate>18/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17899</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Getting diagnostics and location of a token without a syntax tree should not crash</Title>
    <PullRequestDescription>Fixes #17067 
cc @AlekseyTs @gafter @dotnet/roslyn-compiler 

`this.SyntaxTree` is calculated from `Parent?.SyntaxTree`. So if `SyntaxTree` is null, this means that the parent (a `SyntaxNode`) is null, or doesn't belong to a tree. In that bug's case, the node is null.
Please let me know if there is another API surface area that the bug may have missed.</PullRequestDescription>
    <CreatedDate>15/03/2017</CreatedDate>
    <ClosedDate>31/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17827</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure LanguageParser.ParseStatement doesn’t return null.</Title>
    <PullRequestDescription>Fixes #17458.
LanguageParser.ParseStatement can return null in case of an error. LanguageParser.ParseStatement is modified to recover from this situation by parsing an expression statement.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>14/03/2017</CreatedDate>
    <ClosedDate>15/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17787</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Produce error on extension methods in language versions earlier than C# 3</Title>
    <PullRequestDescription>/cc @dotnet/roslyn-compiler @CyrusNajmabadi </PullRequestDescription>
    <CreatedDate>13/03/2017</CreatedDate>
    <ClosedDate>13/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17692</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Refine syntax error recovery for partial code to not interfere with non-error code.</Title>
    <PullRequestDescription>Related to #15885
Fixes #17683

@CyrusNajmabadi Would you like to have a look at this before I send it out for review?
</PullRequestDescription>
    <CreatedDate>10/03/2017</CreatedDate>
    <ClosedDate>15/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17668</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Requiring semicolon after embedded statements</Title>
    <PullRequestDescription>It is my first attempt to the repository. So, I have some questions:

1. I'm attempting to fix the issue within LanguageParser.cs. Is ScriptTests.cs a proper location for tests?
2. Is the test coverage I provided enough?
3. I see that some other tests have try/catch with assert statements inside catch blocks. However, I do not see that it is guaranteed that the catch block is achieved. I added a check for this. Please let me know if this is a right approach. If so, should not we apply it to other tests with try/catch inside?


Here is the issue: https://github.com/dotnet/roslyn/issues/6676</PullRequestDescription>
    <CreatedDate>09/03/2017</CreatedDate>
    <ClosedDate>14/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17615</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Support multi-dimensional arrays of rank 1 for System.Type arguments of attributes.</Title>
    <PullRequestDescription>Fixes #4958.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>07/03/2017</CreatedDate>
    <ClosedDate>08/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17549</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure LocalRewriter doesn’t crash when it has to deal with ErrorMethodSymbol.</Title>
    <PullRequestDescription>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=377890.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>04/03/2017</CreatedDate>
    <ClosedDate>06/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17380</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Make the compiler resilient to broken IDE refactorings</Title>
    <PullRequestDescription>This makes the compiler resilient to bad syntax trees that result from broken
IDE refactorings, so the compiler will not crash and take the IDE with it.
Related to #17321 

@dotnet/roslyn-compiler Please review.
@AlekseyTs You may be interested to see that this uses the distinction with `LocalDeclarationKind.OutVar`.
</PullRequestDescription>
    <CreatedDate>25/02/2017</CreatedDate>
    <ClosedDate>04/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17375</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix a NullReferenceException in DataFlowAnalysis.VariablesDeclared</Title>
    <PullRequestDescription>Fixes #17281 

@dotnet/roslyn-compiler May I please have a couple of reviews of this very tiny crash fix?
</PullRequestDescription>
    <CreatedDate>24/02/2017</CreatedDate>
    <ClosedDate>02/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17294</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Put Local Function's type parameters in scope within function's signature for the purpose of SemanticModel lookup/binding.</Title>
    <PullRequestDescription>Fixes #16801.
Also fixes #17198.

@dotnet/roslyn-compiler, @agocke Please review.</PullRequestDescription>
    <CreatedDate>22/02/2017</CreatedDate>
    <ClosedDate>28/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17267</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Eliminate a double-evaluation when matching a T? against type T</Title>
    <PullRequestDescription>Fixes #17266 

(We will probably want to port this to 15.1 when it is open)

@agocke @AlekseyTs @dotnet/roslyn-compiler Please review this small change (mostly code deletion)
</PullRequestDescription>
    <CreatedDate>21/02/2017</CreatedDate>
    <ClosedDate>21/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17248</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix diagnostic when a variable conflicts with an enclosing lambda parameter.</Title>
    <PullRequestDescription>Fixes #12052

@dotnet/roslyn-compiler Please review this tiny diagnostic correction.
</PullRequestDescription>
    <CreatedDate>19/02/2017</CreatedDate>
    <ClosedDate>23/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17237</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Add support for deconstruction into field-like events.</Title>
    <PullRequestDescription>Fixes #16962.

@dotnet/roslyn-compiler, @jcouv Please review.</PullRequestDescription>
    <CreatedDate>18/02/2017</CreatedDate>
    <ClosedDate>22/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17202</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix issues with `dynamic` in pattern-matching</Title>
    <PullRequestDescription>Fixes #17089 

@AlekseyTs @agocke Please review

@dotnet/roslyn-compat-council This is technically a breaking change, as we now forbid `dynamic` as a pattern type (no object ever has `dynamic` as its runtime type).</PullRequestDescription>
    <CreatedDate>17/02/2017</CreatedDate>
    <ClosedDate>04/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17170</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Disallow "out discard" in expression trees.</Title>
    <PullRequestDescription>Fixes #17138.

@dotnet/roslyn-compiler, @jcouv Please review.</PullRequestDescription>
    <CreatedDate>15/02/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17156</PullRequestID>
    <RepoID>1</RepoID>
    <Title>IsOptional should be false for ref/out parameters, except in COM interop scenarios.</Title>
    <PullRequestDescription>Fixes #8018.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>15/02/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17101</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Allow expression variables in lambdas within constructor and field initializers.</Title>
    <PullRequestDescription>Fixes #16935.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>12/02/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17053</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Re-enable test that verifies ref return cannot be inlined</Title>
    <PullRequestDescription>Fixes #12838
Test from commit https://github.com/dotnet/roslyn/commit/c7349324e98e5a9dbc38b9c8a89f09b41d3c2012
@dotnet/roslyn-ide 
@dotnet/roslyn-compiler </PullRequestDescription>
    <CreatedDate>09/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17050</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Report all invalid preprocessor symbols in diagnostics</Title>
    <PullRequestDescription>Fixes #16913 
@dotnet/roslyn-compiler </PullRequestDescription>
    <CreatedDate>09/02/2017</CreatedDate>
    <ClosedDate>14/03/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>17044</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Report error when receiver of a query expression is a namespace</Title>
    <PullRequestDescription>Fixes #14689</PullRequestDescription>
    <CreatedDate>08/02/2017</CreatedDate>
    <ClosedDate>10/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16939</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Added test to verify intellisense on Enumerable.Join parameter types</Title>
    <PullRequestDescription>Fixes #8712

Note: since this is a test only, I'm basing this PR on master. /cc @jaredpar </PullRequestDescription>
    <CreatedDate>03/02/2017</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16928</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Add tests to improve coverage of pattern-matching implementation and fix a crash.</Title>
    <PullRequestDescription>Fixes #9542
Fixes #16876
</PullRequestDescription>
    <CreatedDate>03/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16834</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix syntax disambiguation for declaration expressions and the is operator</Title>
    <PullRequestDescription>Modifies the disambiguation in a tuple literal so that a declaration expression must be followed by a `,` or `)`, and modifies the disambiguation in an `is` expression so existing code is not affected.

**Customer scenario**

We "broke" code that worked correctly previously. For example, in the statement

``` c#
var j = a &lt; i &gt;&gt; 2;
```

We were treating `a&lt;i&gt;` as a generic (incorrect), rather than as a comparison with a shift (correct). This bug breaks existing (pre c#7) code.

Also, in the statement
``` c#
return (i, isValid ? Errors.IsValid : Errors.HasErrors);
```
we were incorrectly interpreting `isValid?` as a nullable type, and `isValid? Errors` as a declaration expression. The rest of the stuff before the close paren then appeared to be garbage by the parser.
This PR adjusts the disambiguation so that we only parse a declaration expression in this context when it is followed by a `,` or `)`.

**Bugs this fixes:** 

Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=377111
Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=377556

**Workarounds, if any**

It is possible to "fix" customer code broken by these bugs by parenthesizing the `?:` conditional expression (first issue) or parenthesizing the shift operator on the right-hand-side of the comparison (second issue). Unfortunately, some real customer code bases are affected by this, and it is not clear from the compiler error messages what went wrong or how the customer should fix it. Also, this breaks existing customer code that compiled without problem before C# 7, so this could be an adoption blocker.

**Risk**

Low; this fix narrows the disambiguation code so that it only accepts declaration expressions and parses type arguments in more appropriate contexts.

**Performance impact**

None, as the amount of code executed for typical workloads is the same (it is merely a change to the logic executed).

**Is this a regression from a previous update?**

Yes.

**Root cause analysis:**

This was a fallout from a recent complete overhaul for the parsing of patterns and declaration expressions, which are new features in C# 7. We did not have tests for these particular intersections of syntactic features. It is possible that this would have been caught in testing had the compiler team followed through on its plan to assign a team member to adversarial testing of new features. 

**How was the bug found?**

Customer reported (these bugs broke code that worked previously)

@jcouv @VSadov Please review.
</PullRequestDescription>
    <CreatedDate>30/01/2017</CreatedDate>
    <ClosedDate>01/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16828</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Use proper context for AttributeSemanticModel for attributes within Local Function declaration.</Title>
    <PullRequestDescription>Fixes #16751.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>30/01/2017</CreatedDate>
    <ClosedDate>01/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16789</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Always create dedicated InitializerSemanticModel for parameter default value.</Title>
    <PullRequestDescription>Even for cases when the parameter is not part of a type member declaration, i.e. owned by an anonymous method or a local function.
Fixes #16748. Fixes #16374.

Also implement SemanticModel.GetDeclaredSymbol(ParameterSyntax) for parameters of a Local Function.
Fixes #16757.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>27/01/2017</CreatedDate>
    <ClosedDate>30/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16740</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix race conditions caused by doing something *after* the corresponding symbol completion bit was set.</Title>
    <PullRequestDescription>**Customer scenario**

Compiler occasionally crashes while using VS normally, causing VS to crash.

**Bugs this fixes:** 

Fixes #16706

**Workarounds, if any**

None known.

**Risk**

Low. The changes slightly reorganize code to eliminate race conditions.

**Performance impact**

Tiny, if any. No new operations added, but rather existing operations are now performed in a different order.

**Is this a regression from a previous update?**

This has been a longstanding bug in the Roslyn C# compiler since the addition of support for analyzers.

**Root cause analysis:**

Race conditions are difficult to detect, diagnose, repair, and test for. The fixes included in this PR resulted from a survey of our use of completion bits throughout the C# compiler and a systematic elimination of race conditions caused by doing something *after* the caller was the unique setter of some bit. A test written to prevent regressions here (see #16753) has exhibited a different race condition previously unknown (i.e. it fails), so it is not included with this PR.

**How was the bug found?**

Customer reported. The customer also provided a very clear explanation of where (one instance of) the race condition can be found in the compiler.

@dotnet/roslyn-compiler May I please have a couple of reviews of this bug fix for 2.1?
</PullRequestDescription>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>03/02/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16682</PullRequestID>
    <RepoID>1</RepoID>
    <Title>The subsumption tree must treat an unconstrained type parameter as possibly null.</Title>
    <PullRequestDescription>**Customer scenario**

Using a pattern switch on a value whose type is an unconstrained type parameter results in bad code (that would fail verification) or an incorrect error message. Since few users run with verification enabled, this can result in loss of customer data. For example, this
```cs
        static void PatternMatching&lt;TBase, TDerived&gt;(TBase o) where TDerived : TBase
        {
            switch (o)
            {
                case TDerived td:
                    Console.WriteLine(nameof(TDerived));
                    Console.WriteLine(td.GetType());
                    break;
                default:
                    Console.WriteLine("Unmatched");
                    break;
            }
        }
```
is incorrectly compiled to this
```cs
private static void PatternMatching&lt;TBase, TDerived&gt;(TBase o) where TDerived : TBase
{
    TDerived td = o;
    Console.WriteLine("TDerived");
    Console.WriteLine(td.GetType());
}
```

**Bugs this fixes:** 

Fixes #16671

**Workarounds, if any**

Do not use the new type switch feature with type parameter types.

**Risk**

Low. Code change affects only the problematic scenario.

**Performance impact**

Low. Replaces one simple test (may this type be assigned null) with another (may a value of this type be null).

**Is this a regression from a previous update?**

No; the bug is in a new feature.

**Root cause analysis:**

Insufficient test coverage of scenarios that cross-cut language features. Failure to follow through on our plan to assign a developer to an adversarial test role for each feature under development.

**How was the bug found?**

Customer reported.

@AlekseyTs @agocke @dotnet/roslyn-compiler Please review this RTM bug fix.

See also https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?_a=edit&amp;id=373449</PullRequestDescription>
    <CreatedDate>22/01/2017</CreatedDate>
    <ClosedDate>26/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16680</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Bind pattern labels when producing switch label map</Title>
    <PullRequestDescription>**Customer scenario**

Attempting to use a nullable type in a type switch (which is illegal), the compiler can interpret that as a ?: operator, and attempt to bind the expression when producing a map from switch cases to the labels. But since we do not bind the pattern cases, that can result in infinite recursion when trying to bind a reference to the pattern variable. For example
```cs
switch (o)
{
    case Color Color:
    case Color? Color2:
        break;
}
```

**Bugs this fixes:** 

Fixes #16559

**Workarounds, if any**

Don't attempt to use nullable types in the typeswitch.

**Risk**

Very low, as this just causes the compiler to bind something earlier than it previously did.

**Performance impact**

Likely none for the same reason.

**Is this a regression from a previous update?**

No; this bug is in a new feature.

**Root cause analysis:**

Lack of dedicated testing team, and failure to follow-through on Engineering plans to assign a developer to an adversarial testing role for each feature under development.

**How was the bug found?**

Bug found by new test generator written to test random (and therefore unexpected) scenarios. It also identified small test cases for the three Watson crashes, which were fixed in the previous PR.

@AlekseyTs @agocke @dotnet/roslyn-compiler Please review this small RTM fix for a pattern-matching crash.

See also https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?_a=edit&amp;id=369796</PullRequestDescription>
    <CreatedDate>22/01/2017</CreatedDate>
    <ClosedDate>25/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16666</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Properly detect and handle delegate relaxations when ByRef returns are involved.</Title>
    <PullRequestDescription>**Customer scenario**
- Supplying a lambda in place of a delegate that has ByRef return doesn't cause any compilation error, but an invalid code is generated.
- Mismatch in ByRef-ness of return between the target delegate and supplied method doesn't cause any compilation error, but an invalid code is generated.  
- A delegate relaxation for a ByRef returning method that requires a stub doesn't cause any compilation error, but an invalid code is generated.

**Bugs this fixes:** 
Fixes #13206.
Tracked by VSO https://devdiv.visualstudio.com/DevDiv/_workitems?id=369827.

**Workarounds, if any**
No

**Risk**
Low

**Performance impact**
Low

**Is this a regression from a previous update?**
No, new feature.

**Root cause analysis:**
New feature.

**How was the bug found?**
Ad hoc testing

@dotnet/roslyn-compiler, @cston Please review.</PullRequestDescription>
    <CreatedDate>21/01/2017</CreatedDate>
    <ClosedDate>24/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16629</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Stop applying ComVisible attribute to embedded value types.</Title>
    <PullRequestDescription>**Customer scenario**
Customer uses tlbexp tool on an assembly that embeds value types (structures or enums). The output now includes type declarations for the embedded value types, which causes a build break due to a name conflict with types declared elsewhere. Broke VS build.  

**Bugs this fixes:** 
Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=370269.
Related to #16177.
Reverting behavior change introduced in https://github.com/dotnet/roslyn/pull/16279.

**Workarounds, if any**
None, except stop using NoPia.

**Risk**
Low. Reverting to the previous behavior.

**Performance impact**
Low

**Is this a regression from a previous update?**
Yes.

**Root cause analysis:**
Interaction of different tools.

**How was the bug found?**
Toolset update for VS codebase.

@dotnet/roslyn-compiler, @jcouv, @cston Please review.  </PullRequestDescription>
    <CreatedDate>19/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16605</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Restore detection of an ambiguous method type argument inference.</Title>
    <PullRequestDescription>**Customer scenario**
Given a method ```void Assert&lt;T&gt;(T a, T b)```, customer supplies arguments that have different types, but the types are implicitly convertible to each other. The type argument inference is supposed to fail, but it succeeds by choosing one of the types in a non-deterministic manner (first in the collection of keys from a Dictionary, which doesn't guarantee any particular order). Method becomes applicable and can be chosen by Overload Resolution as the best candidate, silently changing runtime behavior of a program after it is built with new version of the compiler. 

**Bugs this fixes:** 
Fixes #16478.
Tracked by VSO https://devdiv.visualstudio.com/DevDiv/_workitems/edit/369821

**Workarounds, if any**
Explicitly supply type arguments.

**Risk**
Low. Targeted fix, putting back the code that got removed by accident.

**Performance impact**
Low. Simple, no new allocations fix.

**Is this a regression from a previous update?**
Yes, from VS2015.

**Root cause analysis:**
A test gap. Added tests.

**How was the bug found?**
Customer reported.

@dotnet/roslyn-compiler, @VSadov, @jcouv Please review.  </PullRequestDescription>
    <CreatedDate>19/01/2017</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16593</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Expand the lifetime of locals declared within CasePatternSwitchLabelSyntax to the entire switch body.</Title>
    <PullRequestDescription>**Customer scenario**
When a lambda or a local function references a local declared within CasePatternSwitchLabelSyntax, either compiler crashes or an application crashes at runtime because corresponding closure isn't properly initialized.  

**Bugs this fixes:** 
Fixes #15536. 
Fixes #16066. 
Tracked by VSO https://devdiv.visualstudio.com/DevDiv/_workitems?id=369824

**Workarounds, if any**
Avoid directly referencing such locals in a lambda or a local function. 

**Risk**
Low. The fix is a targeted change for a pattern switch feature, which is the only feature affected by this issue. 

**Performance impact**
Low. We allocate one additional bound tree node per switch section with locals.

**Is this a regression from a previous update?**
No. New feature.

**Root cause analysis:**
A test gap for a new feature. Tests added.

**How was the bug found?**
Customer reported.

@dotnet/roslyn-compiler, @gafter, @agocke Please review.  </PullRequestDescription>
    <CreatedDate>18/01/2017</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16592</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Change the order of operands to object.Equals() for constant pattern match</Title>
    <PullRequestDescription>**Customer scenario**

The semantics of pattern-matching against a constant are different between the `is` operator and the `switch` statement. They were intended to be the same, but the order of operands to `object.Equals` in the generated code is backwards for the `is` operator. We need to fix this today, before RTM, so that users do not come to depend on the incorrect behavior (now-or-never language change). See also #16513.

**Bugs this fixes:** 

Fixes #16513

**Workarounds, if any**

Avoid using the new `is` operator with a constant right-hand-side.

**Risk**

Tiny. The fix is a one-line change to place the operands in the correct order.

**Performance impact**

None, as we are still executing the same code as before, albeit in a different order. However, with the changed order it will be possible for us to generate much better code in the future.

**Is this a regression from a previous update?**

No, as the feature is new.

**Root cause analysis:**

A subtle oversight in code generation. This might have been caught earlier if the compiler team had followed through on its plan to assign a developer to perform adversarial testing of each new feature under development.

**How was the bug found?**

Customer reported.

@dotnet/roslyn-compiler Please review this teensy tiny RTM fix.
</PullRequestDescription>
    <CreatedDate>18/01/2017</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16569</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Harden pattern-matching binding in error cases.</Title>
    <PullRequestDescription>**Customer scenario**

Code using the new pattern-matching feature, and some erroneous code using the existing is-expression, can cause the compiler to crash.

**Bugs this fixes:** 

Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=336030
Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=294570
Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=368942
Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=363714
Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=364165
Fixes #16296
Also adds test for #16559 

**Workarounds, if any**

Don't use the new features, and don't make any mistakes when using the is-operator.

**Risk**

Low; this is the addition of error-reporting and defensive code to handle error conditions.

**Performance impact**

Low; No additional allocations on normal code paths.

**Is this a regression from a previous update?**

Yes: the crash on erroneous use of the is-operator is a regression.

**Root cause analysis:**

Insufficient test coverage. Lack of dedicated testing team. Failure to follow through on our engineering test plan to pair a developer to "break" each feature under development.

**How was the bug found?**

These were all customer reported.
</PullRequestDescription>
    <CreatedDate>17/01/2017</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16525</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Handle Color Color constant pattern</Title>
    <PullRequestDescription>**Customer scenario**

Pattern-matching using a constant pattern that is subject to the C# language Color-Color rule doesn't work correctly, reported an error instead of binding.

**Bugs this fixes:** 

Fixes #16517

**Workarounds, if any**

Avoid Color-Color scenarios for constant patterns.

**Risk**

Low; this simply changes the binding of the left-hand-side to use a helper for the Color-Color situation.

**Performance impact**

Low; A trivial amount of new code using an existing helper addresses the problem.

**Is this a regression from a previous update?**

No; this is a bug in a new feature.

**Root cause analysis:**

Insufficient test coverage. Lack of dedicated testing team. Failure to follow through on our engineering test plan to pair a developer to "break" each feature under development.

**How was the bug found?**

Customer reported. The fix is provided by the reporter.

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>15/01/2017</CreatedDate>
    <ClosedDate>18/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16467</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Expression variables declared in a local function parameter default are given a scope</Title>
    <PullRequestDescription>**Customer scenario**

If you declare an expression variable (e.g. out variable) inside the default value
expression of a parameter to a local function, **the IDE crashes**.

**Bugs this fixes:** 

Fixes #16167

**Workarounds, if any**

Don't make that mistake.

**Risk**

Small. Corrects a small oversight in the implementation of the interaction of new language features.

**Performance impact**

Trivial.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Missing test for interaction between multiple new language features. Lack of dedicated testing team. Lack of coordinated testing role for new features and interactions between new features.

**How was the bug found?**

Customer reported. It occurred accidentally when the customer pasted XML inside a method body instead of inside the doc comment.

@jcouv @cston previously reviewed this fix in #16315; this moves it to the rc3 branch.
</PullRequestDescription>
    <CreatedDate>12/01/2017</CreatedDate>
    <ClosedDate>13/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16443</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Improve method type argument inference around nullable tuples.</Title>
    <PullRequestDescription>**Customer scenario**
Given a method
```
    Shared Sub Test1(Of T, U)(x As (T, U)?, y As (T, U))
        Console.WriteLine(GetType(U))
    End Sub
```

Type inference infers U as ```MyStruct``` for the fallowing invocation, which causes an exception at runtime.
```
Test1((a:=1, b:=new MyStruct()), (a:=1, b:=new Object()))

Structure MyStruct
End Structure
```
The expectation is that compiler infers U as ```Object```, this is what C# compiler does. 
I think this could be a common scenario. Also, changing type inference behavior later could be a breaking change as there are scenarios which do not lead to a crash at runtime and results of overload resolution could be affected as well.

**Bugs this fixes:** 
Fixes #14152.

**Workarounds, if any**
Provide type arguments explicitly.

**Risk**
Low. The change is specific to tuple types.

**Performance impact**
Low. No new allocations or added complexity.

**Is this a regression from a previous update?**
No, tuples is a new feature. 

**Root cause analysis:**
Have tests.

**How was the bug found?**
Testing

@dotnet/roslyn-compiler, @VSadov, @jcouv Please review.  </PullRequestDescription>
    <CreatedDate>11/01/2017</CreatedDate>
    <ClosedDate>12/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16224</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Permit a throw expression in an expression-bodied ref-returning method.</Title>
    <PullRequestDescription>**Customer scenario**

Use a throw expression as the expression body of a ref-returning local function.

**Bugs this fixes:** 

Fixes #16171

**Workarounds, if any**

Don't use an expression bodied method for this confluence of features.

**Risk**

Very low. The additional code is a simple test and targeted to the problematic scenario.

**Performance impact**

Tiny, if any, for the same reason.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

We did not test the confluence of three new features (expression-bodied methods, ref-returning functions, and throw expressions).

**How was the bug found?**

Customer reported.

@dotnet/roslyn-compiler May I please have a couple of reviews of this tiny bug fix?
</PullRequestDescription>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16222</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Do not allow a throw expression in an expression tree.</Title>
    <PullRequestDescription>**Customer scenario**

Throw expressions were added in C# 7. While they are useful and easy to use,
they are not supported in expression trees. When they are used that way, the
compiler simply crashes.

**Bugs this fixes:** 

Fixes #16122

**Workarounds, if any**

Don't make that mistake.

**Risk**

Very small. The compiler change involves the simple addition of code to diagnose the situation.

**Performance impact**

None expected, as the changed code only affects a new language construct, and is a trivial test.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Missing test for intersection of existing (expression tree) feature with new (throw expression) feature.

**How was the bug found?**

Customer reported.

@dotnet/roslyn-compiler Please review this tiny bug fix.
</PullRequestDescription>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16150</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Add public API to create an error namespace symbol.</Title>
    <PullRequestDescription>**Customer scenario**
Currently, it is possible to get error NamedTypeSymbols that we cannot fully roundtrip with the IDE's OOP process. Specifically, error types may point to error namespaces as their containing symbol. However, there is currently no way to specify that namespace when we try to re-realize the error type. i.e. we have this:

        public abstract INamedTypeSymbol CreateErrorTypeSymbol(INamespaceOrTypeSymbol container, string name, int arity);
But we do not have a way to Create the container in the case of something like an error namespace.

**Bugs this fixes:** 
Fixes #14365.

**Workarounds, if any**
None

**Risk**
Low.

**Performance impact**
Low.

**Is this a regression from a previous update?**
No.

**Root cause analysis:**
Missing API.

**How was the bug found?**
Development.

@dotnet/roslyn-compiler, @CyrusNajmabadi Please review.
CC @AnthonyDGreen, @jaredpar, @gafter for public API change.   </PullRequestDescription>
    <CreatedDate>29/12/2016</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16079</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix a crash caused by an improper reuse of lambdas from return inference cache.</Title>
    <PullRequestDescription>**Customer scenario**
Compiler crashes in some error scenarios due to an improper reuse of lambdas from return inference cache.

**Bugs this fixes:** 
Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=296550.

**Workarounds, if any**
None.

**Risk**
Low.

**Performance impact**
Low.

**Is this a regression from a previous update?**
Regression from Dev14.

**Root cause analysis:**
Caused by changes related to Task-like feature. Unit-tests are added.

**How was the bug found?**
Watson

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>28/12/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>16029</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Don't crash when a win32 resource file is too short.</Title>
    <PullRequestDescription>**Customer scenario**
Pass a file shorter than 4 bytes long as a win32 resource to the compiler. Compiler crashes with System.IO.EndOfStreamException.

**Bugs this fixes:** 
Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=217718.

**Workarounds, if any**
No

**Risk**
Low

**Performance impact**
Low

**Is this a regression from a previous update?**
No

**Root cause analysis:**
Added regression tests.

**How was the bug found?**
Watson

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>20/12/2016</CreatedDate>
    <ClosedDate>20/12/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15975</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Make ScanType() and ParseType() agree not to accept pointer types in deconstruction</Title>
    <PullRequestDescription>**Customer scenario**

Crash in deconstruction that attempts to use a pointer type.

**Bugs this fixes:** 

Fixes #15934

**Workarounds, if any**

Don't make that mistake.

**Risk**

Low. This changes an area of the compiler that recently underwent a complete overhaul. The changes here are relatively small and correct an error introduced at that time.

**Performance impact**

Low. The parser logic changes without any significant algorithmic changes.

**Is this a regression from a previous update?**

The previous update was not know to crash in this scenario, however, the scenario underwent a significant spec revision. The affected scenario is now an assignment expression, not a deconstruction declaration. So it is a bug in relatively recent code.

**Root cause analysis:**

We didn't have tests for this combination of features.

**How was the bug found?**

Customer reported.
</PullRequestDescription>
    <CreatedDate>17/12/2016</CreatedDate>
    <ClosedDate>21/12/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15917</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Correct an off-by-one error in the precedence for is-pattern parsing.</Title>
    <PullRequestDescription>**Customer scenario**

Use the new pattern-matching `is` operator in a more complex expression, such as `e1 is null || e2`

In that case the compiler gets the precedence wrong.

**Bugs this fixes:** 

Fixes #15734

**Workarounds, if any**

Add redundant parens when the compiler gets the precedence wrong (if you notice).

In some circumstances, the compiler will produce executable code with no error, but generate code that is incorrect because of the precedence. Because of that, this should be fixed sooner rather than later.

**Risk**

Low; fix is localized to the relevant parsing code.

**Performance impact**

None. We parse the same way as before, but with the correct precedence.

**Is this a regression from a previous update?**

No. This is an error in the implementation of a new feature.

**Root cause analysis:**

We had a test hole for this particular combination of features. This PR adds a number of precedence tests for the feature so that the bug cannot recur undetected.

**How was the bug found?**

Customer report.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>15/12/2016</CreatedDate>
    <ClosedDate>21/12/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15886</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Do not mark argument values as bad due to issues with names.</Title>
    <PullRequestDescription>**Customer scenario**
- Customer uses an Out Var declaration without an argument name after a named argument.
- Customer uses a duplicate argument name for an Out Var declaration.

Both scenarios are error conditions, but compiler crashes instead of reporting appropriate diagnostics.

**Bugs this fixes:** 
Fixes #15732.

**Workarounds, if any**
Avoid getting into the error conditions.

**Risk**
Low.

**Performance impact**
Low perf impact because no extra allocations and no complexity changes.

**Is this a regression from a previous update?**
No

**Root cause analysis:**
New feature. Added regression tests for the scenarios.

**How was the bug found?**
Dogfood.
</PullRequestDescription>
    <CreatedDate>14/12/2016</CreatedDate>
    <ClosedDate>15/12/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15868</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Handle additional cases in MemberSemanticModel.GetQueryEnclosingBinder</Title>
    <PullRequestDescription>**Customer scenario**

Intellisense may report incorrect symbols in scope in C# LINQ queries with `out` or pattern variables in the query, particularly if there are duplicate names in scope.

**Bugs this fixes:** 

https://github.com/dotnet/roslyn/issues/10466

**Workarounds, if any**

Simplify the query by removing the `out` variables.

**Risk**

Low. The changes are in walking the bound query to determine which node to use for symbol lookup.

**Performance impact**

Low.

**Is this a regression from a previous update?**

Not a regression. Issue was caught with unit tests.</PullRequestDescription>
    <CreatedDate>13/12/2016</CreatedDate>
    <ClosedDate>15/12/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15839</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Use a linear algorithm to find the best candidate</Title>
    <PullRequestDescription>Fixes #13685



</PullRequestDescription>
    <CreatedDate>12/12/2016</CreatedDate>
    <ClosedDate>21/06/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15694</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure that an attempt to embed a generic type from PIA results in an error.</Title>
    <PullRequestDescription>**Customer scenario**
Customer implicitly references a generic type defined in a linked (/link) assembly. Implicitly meaning that the customer inherits from an interface, which uses the type in one of its members, or the customer references a structure, which uses the type in one of its members, but never actually references the generic type itself. No error is reported, the type is not embedded, the assembly is referenced by the resulting binary as if it was referenced rather than linked. However, other types from the same assembly might still be embedded into the resulting binary.

**Bugs this fixes:** 
Fixes #13200.

**Workarounds, if any**
Avoid an implicit reference to a generic type defined in a linked (/link) assembly.

**Risk**
Low.

**Performance impact**
Low perf impact because no extra allocations and no complexity added.

**Is this a regression from a previous update?**
No

**Root cause analysis:**
A test gap for a non-common error scenario. Added unit-tests to close the gap.

**How was the bug found?**
Ad hoc testing


@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>06/12/2016</CreatedDate>
    <ClosedDate>06/12/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15646</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix DeclaredInside for expression variables and deconstruction</Title>
    <PullRequestDescription>@dotnet/roslyn-compiler Please review.

**Customer scenario**

`DeclaredInside` is used for extract method, so the bugs fixed here result in incorrect behavior for that IDE feature. Also, it fixes a `NullReferenceException` that would result in an IDE crash when extract method is used in some circumstances.

**Bugs this fixes:** 

Fixes #12940
Fixes #14110
Fixes #15640

**Workarounds, if any**

Don't use extract method (or any other IDE features that use `DeclaredInside`).

**Risk**

Fairly low; the changes are localized to the affected scenarios, and significantly simplify the implementation.

**Performance impact**

Small. Slightly larger node for `BoundLocal`, which is transiently used during semantic analysis and in the `SemanticModel`

**Is this a regression from a previous update?**

No. The bugs have been present as long as the feature implementations have been in the code base.

**Root cause analysis:**

Implementing this API for expression variables has been a known laggard in the implementation of the new features. Because it wasn't implemented, it also wasn't tested. This PR adds tests for the affected scenarios.

**How was the bug found?**

Ad-hoc and unit testing while completing the feature.
</PullRequestDescription>
    <CreatedDate>02/12/2016</CreatedDate>
    <ClosedDate>15/12/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15641</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Add constraint checking for tuple types</Title>
    <PullRequestDescription>Fixes #15399</PullRequestDescription>
    <CreatedDate>02/12/2016</CreatedDate>
    <ClosedDate>04/01/2017</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15636</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Permit a throw expression as the body of an expression-bodied lambda</Title>
    <PullRequestDescription>Fixes #15555

@dotnet/roslyn-compiler Please review. This will be proposed for ask mode after review.</PullRequestDescription>
    <CreatedDate>01/12/2016</CreatedDate>
    <ClosedDate>09/12/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15235</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Address outstanding issues around custom modifiers in VB.</Title>
    <PullRequestDescription>This change fixes the following issues in VB compiler: #8948 and #14453.
Closes #8948. Closes #14453.

@dotnet/roslyn-compiler, @VSadov, @cston  Please review.</PullRequestDescription>
    <CreatedDate>14/11/2016</CreatedDate>
    <ClosedDate>16/11/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15156</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Address outstanding issues around custom modifiers in C#.</Title>
    <PullRequestDescription>This change fixes the following issues in C# compiler: #8948 and #14453.

@dotnet/roslyn-compiler, @VSadov Please review.</PullRequestDescription>
    <CreatedDate>11/11/2016</CreatedDate>
    <ClosedDate>12/11/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15098</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Prevent duplicate use-site errors reported for tuple types explicitly referenced in source.</Title>
    <PullRequestDescription>Also add regression test for #14888. Closes #14888.

@dotnet/roslyn-compiler, @VSadov, @jcouv Please review.</PullRequestDescription>
    <CreatedDate>08/11/2016</CreatedDate>
    <ClosedDate>10/11/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>15017</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Port changes from #13024 to VB for various tuple fixes</Title>
    <PullRequestDescription>Fixes #14895 

@dotnet/roslyn-compiler Please review this port of an assortment of C# fixes for tuples.</PullRequestDescription>
    <CreatedDate>05/11/2016</CreatedDate>
    <ClosedDate>10/11/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14829</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Bind the receiver before the arguments of an invocation</Title>
    <PullRequestDescription>Fixes #14825 

@AlekseyTs @agocke Please review
@dotnet/roslyn-compiler Additional reviews welcome
</PullRequestDescription>
    <CreatedDate>31/10/2016</CreatedDate>
    <ClosedDate>31/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14822</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Adjust the way parser handles line-If termination.</Title>
    <PullRequestDescription>Fixes #14761.

@dotnet/roslyn-compiler Please review.</PullRequestDescription>
    <CreatedDate>31/10/2016</CreatedDate>
    <ClosedDate>01/11/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14803</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Make sure the solution crawler is running in the VS workspace.</Title>
    <PullRequestDescription>Fixes #14802 by making sure that the solution crawler is running in the VS workspace.

@Pilchie, @CyrusNajmabadi, @jasonmalinowski, @heejaechang, please review. Thank you!
</PullRequestDescription>
    <CreatedDate>28/10/2016</CreatedDate>
    <ClosedDate>28/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14799</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Revise pattern parsing to fix compatibility break</Title>
    <PullRequestDescription>Fixes #14785 

@AlekseyTs @agocke Please review
@dotnet/roslyn-compiler Additional reviews welcome
</PullRequestDescription>
    <CreatedDate>28/10/2016</CreatedDate>
    <ClosedDate>31/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14790</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Add a hidden sequence point around the code that assigns pattern variables in switch</Title>
    <PullRequestDescription>Fixes #14740

This is a hand-modified cherry-pick of the fix from dev15-rc

@AlekseyTs @VSadov Please re-review.
</PullRequestDescription>
    <CreatedDate>28/10/2016</CreatedDate>
    <ClosedDate>02/11/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14789</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Add a hidden sequence point around the code that assigns pattern variables in switch</Title>
    <PullRequestDescription>Fixes #14740

@AlekseyTs @agocke Please review. Hoping to get these reviewed and integrated by 6pm for RC
@dotnet/roslyn-compiler Additional reviews welcome
@MattGertz For ask mode
</PullRequestDescription>
    <CreatedDate>27/10/2016</CreatedDate>
    <ClosedDate>28/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14748</PullRequestID>
    <RepoID>1</RepoID>
    <Title>A "null constant" pattern is handled separately from other constants</Title>
    <PullRequestDescription>Fixes #14721 
@AlekseyTs @agocke Please review
@dotnet/roslyn-compiler Additional reviews welcome
@MattGertz Proposed fix for RC ask mode, please

This fixes a compiler crash where we do not properly handle a null constant case.
The fix is small focused, and therefore low risk.
</PullRequestDescription>
    <CreatedDate>26/10/2016</CreatedDate>
    <ClosedDate>27/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14742</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure all references to static locals are replaced with proper field references.</Title>
    <PullRequestDescription>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=264417.

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>26/10/2016</CreatedDate>
    <ClosedDate>27/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14730</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Skip enclosing parens in ancestors to find the when clause of a switch case</Title>
    <PullRequestDescription>Fixes #14707
@AlekseyTs @agocke Please review
@dotnet/roslyn-compiler Additional review welcome.
@MattGertz For RC ask mode

This fixes a compiler crash when parens are used around a switch case's when clause expression.
The fix is small and focused, and therefore low risk.
</PullRequestDescription>
    <CreatedDate>25/10/2016</CreatedDate>
    <ClosedDate>26/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14729</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Handle expression variables defined in a switch case expression.</Title>
    <PullRequestDescription>Fixes #14717
See also #14727 

Note: this fixes a crash that can occur while typing a switch statement. Proposed for dev15-rc

@AlekseyTs @agocke Please review
@dotnet/roslyn-compiler Additional reviews welcome.
@MattGertz For ask mode approval.
</PullRequestDescription>
    <CreatedDate>25/10/2016</CreatedDate>
    <ClosedDate>26/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14714</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Strengthen the check that detects nullable lifting for a user-defined conversion during lowering.</Title>
    <PullRequestDescription>Type comparison should ignore insignificant differences like tuple name mismatch, etc.
Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=269808.

@dotnet/roslyn-compiler, @VSadov Please review.
</PullRequestDescription>
    <CreatedDate>25/10/2016</CreatedDate>
    <ClosedDate>25/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14703</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Report a diagnostic for a missing comma in attribute, previously not reported.</Title>
    <PullRequestDescription>Fixes #14696

@dotnet/roslyn-compiler Please review this small bug fix.
</PullRequestDescription>
    <CreatedDate>24/10/2016</CreatedDate>
    <ClosedDate>25/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14702</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix parsing of "e is nameof" to retain compatibility</Title>
    <PullRequestDescription>Fixes #14636 

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>24/10/2016</CreatedDate>
    <ClosedDate>25/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14678</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Preserve an implicit nature of WITH receiver when it is used with an extension method.</Title>
    <PullRequestDescription>Fixes #10929.

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>21/10/2016</CreatedDate>
    <ClosedDate>25/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14671</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Non recursive tree serialization</Title>
    <PullRequestDescription>Fixes problem with stack overflow when serializing deep syntax trees.

@dotnet/roslyn-ide @heejaechang please review
</PullRequestDescription>
    <CreatedDate>21/10/2016</CreatedDate>
    <ClosedDate>28/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14625</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Add a test for https://devdiv.visualstudio.com/DevDiv/_workitems?id=278481.</Title>
    <PullRequestDescription>Also added some checks that should help to figure out how to reproduce the crash.

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>19/10/2016</CreatedDate>
    <ClosedDate>20/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14585</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix a crash in compiling pattern switch when certain combinations of …</Title>
    <PullRequestDescription>…type patterns appear together

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=273713

@dotnet/roslyn-compiler @AlekseyTs @agocke Please review this fix for a RC compiler crash.
@MattGertz I propose to fix this compiler crash in RC.
</PullRequestDescription>
    <CreatedDate>18/10/2016</CreatedDate>
    <ClosedDate>19/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14566</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Opt out of RoslynContentType</Title>
    <PullRequestDescription>PR for XAML Dev15 RC issue #14565.

XAML needs to opt out of RoslynContentType. There were too many incompatible command handlers that prevented Visual Studio from doing the right thing for XAML.

I also removed a CodeFixProvider that we implemented in VS instead. The other one needs to stay since it references an internal language service.

@CyrusNajmabadi, please review. Thank you!
</PullRequestDescription>
    <CreatedDate>17/10/2016</CreatedDate>
    <ClosedDate>18/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14550</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Propagate delegate relaxation information for tuple conversions.</Title>
    <PullRequestDescription>Fixes #14255.
Also fixes #14530.

@dotnet/roslyn-compiler, @VSadov, @jcouv Please review.
</PullRequestDescription>
    <CreatedDate>16/10/2016</CreatedDate>
    <ClosedDate>18/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14488</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Propagate InvolvesNarrowingFromNumericConstant flag for tuple conversions.</Title>
    <PullRequestDescription>Related to #14255.
Fixes #14473.

@dotnet/roslyn-compiler, @VSadov, @jcouv Please review.
</PullRequestDescription>
    <CreatedDate>13/10/2016</CreatedDate>
    <ClosedDate>13/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14416</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Enable speculating on expressions with expression variables</Title>
    <PullRequestDescription>Fixes #14384 

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>10/10/2016</CreatedDate>
    <ClosedDate>14/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14320</PullRequestID>
    <RepoID>1</RepoID>
    <Title>SymbolDisplayVisitor.CreateAliasMap – pop out of speculative semantic model to lookup for declared aliases.</Title>
    <PullRequestDescription>Fixes #5002.

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>06/10/2016</CreatedDate>
    <ClosedDate>07/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14318</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Move semantic errors in pattern switch to the binding phase.</Title>
    <PullRequestDescription>Reorganize the use of the decision tree so that it is no longer an inter-phase
data structure. It is used transiently during binding to compute subsumption,
during which we report any use-site errors that arise. It is also used transiently
during lowering to produce the lowered form. We augment the bound nodes
to remove the decision tree and record, for each switch case, whether it is
reachable (a bool), and whether the switch as a whole is complete (another bool).
That summarizes all the semantic information that needs to remain from
initial binding for use by later phases.
Fixes #14296
Fixes #12175
</PullRequestDescription>
    <CreatedDate>06/10/2016</CreatedDate>
    <ClosedDate>18/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14222</PullRequestID>
    <RepoID>1</RepoID>
    <Title>A ref type's subtype is a context in which only a type is expected.</Title>
    <PullRequestDescription>Fixes #14174 

@VSadov @dotnet/roslyn-compiler Please review this tiny bug fix.
</PullRequestDescription>
    <CreatedDate>01/10/2016</CreatedDate>
    <ClosedDate>05/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14221</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix XAML typing exception</Title>
    <PullRequestDescription>**@jasonmalinowski**: Need to add XAML to language map in order to avoid ThrowIfTrue in TryFetch.
</PullRequestDescription>
    <CreatedDate>30/09/2016</CreatedDate>
    <ClosedDate>03/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14181</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Each kind of compiler should take its /version info from its containing assembly's FileVersion</Title>
    <PullRequestDescription>It appears we were lucky things worked before (that is, before I broke things by making the
output use file version and the tests use assembly version), as the implementation and tests
for /help disagreed on which assembly to use to get the version info for the C# and VB
compilers. They were usually the same information by coincidence as a consequence of
how the product is built. We now consistently use the file version of the file containing
the assembly of the compiler main class for /help, /version, and the tests of those flags.
Fixes #14172

@dotnet/roslyn-compiler Please review
@jasonmalinowski FYI
</PullRequestDescription>
    <CreatedDate>29/09/2016</CreatedDate>
    <ClosedDate>29/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14162</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Implement sequence points for pattern switch statements.</Title>
    <PullRequestDescription>Fixes #13971

We were previously undecided about when we would add support for a sequence
point at the when clause of a switch case. Since the when clause can call into other
user code, we need the sequence point to give sensible behavior when inspecting
the call stack. So we now support sequence points in the when clause.

Further work will be required to support setting a breakpoint in the when clause.
That is tracked by #12378

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>28/09/2016</CreatedDate>
    <ClosedDate>05/10/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14105</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Properly calculate OverridenProperty for synthesized WithEvents overrides.</Title>
    <PullRequestDescription>Fixes #7659.

@dotnet/roslyn-compiler, @VSadov Please review.
</PullRequestDescription>
    <CreatedDate>27/09/2016</CreatedDate>
    <ClosedDate>27/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14017</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure a use-site error is reported for an alias that cannot be resolved</Title>
    <PullRequestDescription>Fixes #13926.

@dotnet/roslyn-compiler Please review Update 5 fix.
</PullRequestDescription>
    <CreatedDate>23/09/2016</CreatedDate>
    <ClosedDate>23/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>14010</PullRequestID>
    <RepoID>1</RepoID>
    <Title>RemoveAllSyntaxTrees should preserve embedded syntax trees in Declaration Table.</Title>
    <PullRequestDescription>Fixes #13925.

@dotnet/roslyn-compiler Please review Update 5 fix.
</PullRequestDescription>
    <CreatedDate>23/09/2016</CreatedDate>
    <ClosedDate>23/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13933</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Avoid a null value key in the decision tree in error recovery situations.</Title>
    <PullRequestDescription>I was unable to reproduce the problem, so I don't have a test.
Fixes #13884

@AlekseyTs @agocke Please review
@dotnet/roslyn-compiler FYI
</PullRequestDescription>
    <CreatedDate>20/09/2016</CreatedDate>
    <ClosedDate>21/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13912</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Eliminate Debug vs. Release behavior difference in tests.</Title>
    <PullRequestDescription>Fixes #13901.
Related to #13900, which tracks the root product issue.

@dotnet/roslyn-compiler Please review a fix for an Urgency-Now bug.
</PullRequestDescription>
    <CreatedDate>19/09/2016</CreatedDate>
    <ClosedDate>19/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13883</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix name lookup through an unbound generic type.</Title>
    <PullRequestDescription>Fixes #9850.

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>17/09/2016</CreatedDate>
    <ClosedDate>20/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13870</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Improve location of ERR_ParamUnassigned error for local functions.</Title>
    <PullRequestDescription>Fixes #12467.

@dotnet/roslyn-compiler, @agocke Please review.
</PullRequestDescription>
    <CreatedDate>16/09/2016</CreatedDate>
    <ClosedDate>19/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13865</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure proper validation of operator signatures when tuple types are involved.</Title>
    <PullRequestDescription>Fixes #11986.
Fixes #11530.

@dotnet/roslyn-compiler, @VSadov, @jcouv Please review.
</PullRequestDescription>
    <CreatedDate>16/09/2016</CreatedDate>
    <ClosedDate>20/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13814</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Implement new syntactic disambiguation rule for pattern-matching</Title>
    <PullRequestDescription>Fixes #10492
The behavior is specified in #13813 

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>15/09/2016</CreatedDate>
    <ClosedDate>22/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13807</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix data flow analysis for using variables</Title>
    <PullRequestDescription>Fixes #9581

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>14/09/2016</CreatedDate>
    <ClosedDate>19/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13804</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix a bug in lambda type inference for `delegate {...}`.</Title>
    <PullRequestDescription>The bug is that, as an optimization, we use 'null' as the delegate type for
a parameterless `delegate` lambda, but code elsewhere in the compiler
assumes that a null delegate type occurs only in error recovery situations.
Fixes #13797 

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>14/09/2016</CreatedDate>
    <ClosedDate>14/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13798</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Never offer to remove an unboxing cast, as it can cause an exception.</Title>
    <PullRequestDescription>Fixes #12572 
Fixes #10306

It turns out the underlying bug has nothing to do with pattern-matching, or anything in the compiler.

@DustinCampbell @mavasani Can you please review this?
@dotnet/roslyn-compiler Any additional reviews are welcome.
</PullRequestDescription>
    <CreatedDate>14/09/2016</CreatedDate>
    <ClosedDate>14/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13770</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Maintain a separate decision tree for subsumption and code gen</Title>
    <PullRequestDescription>Fixes #13520 

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>13/09/2016</CreatedDate>
    <ClosedDate>23/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13747</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix crash on "is type" operator with typeless tuple expression.</Title>
    <PullRequestDescription>Add tests for non-reproducible issue #13723
Fixes #13746 
Also rename an error code for clarity.

@VSadov @jcouv Please review
@dotnet/roslyn-compiler More reviews welcome!
</PullRequestDescription>
    <CreatedDate>12/09/2016</CreatedDate>
    <ClosedDate>13/09/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13047</PullRequestID>
    <RepoID>1</RepoID>
    <Title>For new switch semantics, we rely on subsumption checking to</Title>
    <PullRequestDescription>diagnose duplicate cases. Also, modify one of the diagnostics in
the new switch binder to be identical to that produced by the C#6
switch binder.

Fixes #12573 
@AlekseyTs @agocke Please review
@dotnet/roslyn-compiler Additional eyes most welcome.
</PullRequestDescription>
    <CreatedDate>09/08/2016</CreatedDate>
    <ClosedDate>10/08/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>13020</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Make the binder resilient to ref type and ref expression nodes.</Title>
    <PullRequestDescription>Although I have been able to get the IDE to crash by playing around in the IDE by hand before this change, I was unable to come up with a simple repro suitable for a unit test.

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>09/08/2016</CreatedDate>
    <ClosedDate>10/08/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>12991</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Move cyclic variable type inference detection to a syntactic check.</Title>
    <PullRequestDescription>Fixes #12883

Note: the first commit moves semantic tests from the emit testing project to the semantic testing project, ,but otherwise makes no substantive changes. The second commit is the meat of the change relevant to the bug fix. 

We eliminate the infrastructure around `ImplicitlyTypedLocalsBeingBound`, which was made obsolete some time ago when we went to the model of looking up binders before using them (e.g. the binder passed in to `BindStatement` is not used for binding the statement, but is instead used to look up a suitable binder). It was for some reason left in the code base, but in a somewhat broken state. The introduction of deconstruction made he approach irredeemable. We now diagnose cyclic type inference using a pure syntactic test - is the inferred variable used in the "forbidden zone" of the syntax that needs to be bound to infer its type?

@jcouv @VSadov Please review
@dotnet/roslyn-compiler FYI
</PullRequestDescription>
    <CreatedDate>08/08/2016</CreatedDate>
    <ClosedDate>09/08/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>12941</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Report errors for new features unsupported in expression trees.</Title>
    <PullRequestDescription>Fixes #12900 

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>04/08/2016</CreatedDate>
    <ClosedDate>11/08/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>12805</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix a small bug in the syntax model for patterns</Title>
    <PullRequestDescription>Fixes #12703 

@dotnet/roslyn-compiler @agocke Please review this tiny change.
</PullRequestDescription>
    <CreatedDate>28/07/2016</CreatedDate>
    <ClosedDate>28/07/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>12372</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Debugger locals show wrong value for parameter changed and captured by closure in VB</Title>
    <PullRequestDescription>Fix #12219
</PullRequestDescription>
    <CreatedDate>07/07/2016</CreatedDate>
    <ClosedDate>22/07/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>12329</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Cut short recursion that can occur (by spec!) in the better betterness code.</Title>
    <PullRequestDescription>This handles the simplest cases that are likely to arise in practice. We simply limit
direct recursion in "better conversion target" to a depth of 100.
See #12061 for the related spec bug. The spec still must be adjusted to say what should happen here,
and the implementation will need to be changed to follow that new specification.

@khyperia @dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>02/07/2016</CreatedDate>
    <ClosedDate>05/07/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>12195</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Only compute entry points when compiling everything.</Title>
    <PullRequestDescription>Fixes #12113 
Previously reviewed as #12120
</PullRequestDescription>
    <CreatedDate>24/06/2016</CreatedDate>
    <ClosedDate>24/06/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>12016</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Skip an IDE test that fails in master.</Title>
    <PullRequestDescription>Related to #11980 

@dotnet/roslyn-ide Please have a look. Blocking some compiler work.
</PullRequestDescription>
    <CreatedDate>14/06/2016</CreatedDate>
    <ClosedDate>14/06/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>11807</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Improved error recovery for lambdas in a call with extra arguments.</Title>
    <PullRequestDescription>Fixes #557, #5498

@dotnet/roslyn-compiler Please review
@CyrusNajmabadi FYI
</PullRequestDescription>
    <CreatedDate>07/06/2016</CreatedDate>
    <ClosedDate>13/06/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>11718</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Attempt type inference when there are no applicable methods</Title>
    <PullRequestDescription>because there are arguments missing, to force lambda binding
for error recovery.
Fixes #11053, #11358 

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>02/06/2016</CreatedDate>
    <ClosedDate>03/06/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>10835</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Update failing test.</Title>
    <PullRequestDescription>This fixes a test whose failure was probably caused by a bad auto-merge.

@jaredpar @AlekseyTs @agocke Please review.
@dotnet/roslyn-compiler FYI
</PullRequestDescription>
    <CreatedDate>25/04/2016</CreatedDate>
    <ClosedDate>25/04/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>10696</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Code Model: Implement IParameterKind legacy interface</Title>
    <PullRequestDescription>Fixes #10525 

We did not implement the internal legacy interface `IParameterKind` on `EnvDTE.CodeParameter` because there were no known consumers. Unfortunately, it appears that there is some old code in the first (i.e. pre-.NET 4.0) version of the Workflow Designer that depends on this interface being present. Without the interface, at least one Workflow activity can not be properly configured within the designer. 

Unfortunately, because the Workflow Designer ships in the .NET Framework, it's far easier to fix this problem in Code Model rather than update Workflow to use a different API. So, this change implements the `IParameterKind` interface. I've verified that the Workflow Designer doesn't work without this change and _does_ work properly with it. Plenty 'o unit tests.

cc @dotnet/roslyn-ide for review
</PullRequestDescription>
    <CreatedDate>19/04/2016</CreatedDate>
    <ClosedDate>20/04/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>10643</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix compiler crash in broken code in pattern matching</Title>
    <PullRequestDescription>Fix binder factory for local function improperly placed as an embedded statement.
Also changes per code review on previous PR in pattern-matching branch.
Fixes #10529

@AlekseyTs @agocke Please review
/cc @dotnet/roslyn-compiler 
</PullRequestDescription>
    <CreatedDate>16/04/2016</CreatedDate>
    <ClosedDate>19/04/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>10620</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Address backwards compatibility issue with AssemblyInformationalVersionAttribute handling</Title>
    <PullRequestDescription>Make compiler produce the same Product Build, Major, Minor and Private Parts in VersionInfo as VS2013 compiler when Assembly ProductAssemblyFileVersionAttribute and AssemblyInformationalVersion contain invalid format.

Also introduce warning diagnostic for AssemblyInformationalVersion with invalid version string.

This addresses issue #5098
</PullRequestDescription>
    <CreatedDate>15/04/2016</CreatedDate>
    <ClosedDate>27/04/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>10491</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix parsing of constant patterns such as int.MaxValue</Title>
    <PullRequestDescription>Fix parsing of constant patterns such as int.MaxValue
Remove two ambiguities in the formal grammar for type_pattern
Fixes #10465 

The issue (and fix) arises because of the inherent ambiguity between _type_ and _expression_ in the grammar

``` antlr
relational_expression
    : relational_expression 'is' type
    | relational_expression 'is' pattern
    ;

pattern
    : constant_pattern
    ;

constant_pattern
    : shift_expression
    ;
```

I've adjusted the heuristics used to disambiguate them. In truly ambiguous cases, we parse as a type and then, if the binder finds a constant expression, we just use the value of that expression.

I'm doing some research now to determine if these heuristics introduce any incompatibilities.

@agocke @AlekseyTs Please review
@dotnet/roslyn-compiler FYI
</PullRequestDescription>
    <CreatedDate>11/04/2016</CreatedDate>
    <ClosedDate>14/04/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>9817</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix a race in the production of compilation events.</Title>
    <PullRequestDescription>Fixes #9759 
@dotnet/roslyn-compiler Please review (the same as the other one)
@davkean @MattGertz FYI this is for stabilization
</PullRequestDescription>
    <CreatedDate>16/03/2016</CreatedDate>
    <ClosedDate>17/03/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>9815</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix a race in the production of compilation events.</Title>
    <PullRequestDescription>Fixes #9759 
@dotnet/roslyn-compiler Please review.
@davkean @MattGertz FYI
</PullRequestDescription>
    <CreatedDate>16/03/2016</CreatedDate>
    <ClosedDate>17/03/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>9448</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Revert "Fix EnC for compilations with dependencies using time-based v…</Title>
    <PullRequestDescription>…ersioning"

This reverts commit d43d4780d54276738fe970897e4cf1cd1c58059d.
</PullRequestDescription>
    <CreatedDate>03/03/2016</CreatedDate>
    <ClosedDate>03/03/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>9447</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Revert "Fix EnC for compilations with dependencies using time-based v…</Title>
    <PullRequestDescription>…ersioning"

This reverts commit d43d4780d54276738fe970897e4cf1cd1c58059d.
</PullRequestDescription>
    <CreatedDate>03/03/2016</CreatedDate>
    <ClosedDate>03/03/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>9446</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Revert "Fix EnC for compilations with dependencies using time-based v…</Title>
    <PullRequestDescription>…ersioning"

This reverts commit d43d4780d54276738fe970897e4cf1cd1c58059d.
</PullRequestDescription>
    <CreatedDate>03/03/2016</CreatedDate>
    <ClosedDate>03/03/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>9360</PullRequestID>
    <RepoID>1</RepoID>
    <Title>[Ask Mode] re-arranged parameter to keep binary back compat</Title>
    <PullRequestDescription>fix #9047

...

this is to keep binary backward compatibility. new parameter gives a way for third party analyzer author to crash host when exception happened so that they can get a better repro/dump for their analyzer.

in VS, we control the value for the parameter, so third-party analyzer can't crash VS.
</PullRequestDescription>
    <CreatedDate>01/03/2016</CreatedDate>
    <ClosedDate>02/03/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>9359</PullRequestID>
    <RepoID>1</RepoID>
    <Title>[Ask Mode] initialize to max value so that there is no conflict when finding old…</Title>
    <PullRequestDescription>…est cache.

this fixes Watson crash due to IndexOutOfIndex exception.

https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?_a=edit&amp;id=179939

since it is watson crash, I dont have exact repro or scenarios where this happens, but this fix should make such situation can't ever happen.
</PullRequestDescription>
    <CreatedDate>01/03/2016</CreatedDate>
    <ClosedDate>02/03/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>8889</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Produce only a single compilation event for partial methods.</Title>
    <PullRequestDescription>Fixes #7477 

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>18/02/2016</CreatedDate>
    <ClosedDate>24/02/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>8836</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix crash if client completes the event queue before the compiler is finished with it.</Title>
    <PullRequestDescription>Fixes #8178

@dotnet/roslyn-compiler Please review
</PullRequestDescription>
    <CreatedDate>17/02/2016</CreatedDate>
    <ClosedDate>08/03/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>8339</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix VB Inline Temporary Variable to work properly when identifiers differ by case</Title>
    <PullRequestDescription>Fixes #8119

Tagging @dpoeschl and @dotnet/roslyn-ide 
</PullRequestDescription>
    <CreatedDate>02/02/2016</CreatedDate>
    <ClosedDate>02/02/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>8308</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix null reference exception when typing a dot after a complete VB Handles clause</Title>
    <PullRequestDescription>Fixes #8307

Tagging @rchande and @dotnet/roslyn-ide 
</PullRequestDescription>
    <CreatedDate>02/02/2016</CreatedDate>
    <ClosedDate>02/02/2016</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7469</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Rename DocumentationCommentFormatting namespace to DocumentationComments</Title>
    <PullRequestDescription>Just a minor change to make XML doc comment IDE feature work a bit more focused. Also, cleaning up some usings/Imports at the same time

Tagging @dotnet/roslyn-ide 
</PullRequestDescription>
    <CreatedDate>14/12/2015</CreatedDate>
    <ClosedDate>14/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7404</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix/Harden code path hit by Watson dump</Title>
    <PullRequestDescription>There's a code path being hit in a Watson-reported crash in `CodeClass.RemoveMember(...)`. This method is expected to be passed a Code Model `CodeElement` that we created, a string with the name of a member, or an index to a member. However, it's entirely possible that it could be passed something unexpected, like a `CodeElement` from another language. I wasn't able to determine a repro for the crash, so this is my best effort at hardening that method against further crashes.

Tagging @dotnet/roslyn-ide 
</PullRequestDescription>
    <CreatedDate>10/12/2015</CreatedDate>
    <ClosedDate>14/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7366</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Watson: Fix crash when accessing CodeProperty.OverrideKind property for property not contained by a type</Title>
    <PullRequestDescription>The root cause is based on analysis of a Watson crash dump with ~300 hits. The call stack looks like this:

```
microsoft_visualstudio_languageservices_csharp_ni!Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.CSharpCodeModelService.GetOverrideKind
microsoft_visualstudio_languageservices_implementation_ni!Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.InternalElements.AbstractCodeMember.get_OverrideKind
envdte80!EnvDTE80.CodeProperty2.get_OverrideKind
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeController+AllLanguages+AttributeIsNew.GetAttribute
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeController.GetAttribute
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeController.GetProperties
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeHandler+CodeModelCache.FireAddEvent
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeHandler+CodeModelCache.AddElement
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeHandler.WalkCodeElement
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeHandler+CodeModelCache.AddElementWithChildren
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeHandler+CodeModelCache.RebindChildren
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeHandler+CodeModelCache.ChangeElementUnknown
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeHandler+CodeModelCache.ChangeElement
microsoft_visualstudio_modeling_artifactmapper_vshost!Microsoft.VisualStudio.Modeling.ArtifactMapper.VSHost.CodeHandler.codeModelEvents_Changed
```

After analysis of the dump, I was able to reproduce the call stack using the following steps:
1. Create new Class Library
2. In the Solution Explorer, right-click on Class1.cs and choose View-&gt;View Class Diagram from the context menu.
3. Add a new property inside Class1.
4. Copy and paste that property _twice_ inside the enclosing namespace of Class1.

This causes an "Unknown" code model event to fire which the Class Designer responds to by digging through its elements and accessing various properties. One of those properties (`OverrideKind`) retrieves the containing type of the element, but that's null for the properties contained in a namespace and the call throws. So, I've added simple null checks to harden against that situation. However, there is a mode serious problem in that Code Model really shouldn't be firing events for members that it doesn't really support (and didn't support in Dev12). So, I've made a deeper change that attempts to faithfully replicate the behavior of Dev12 with regard to what nodes are supported by Code Model.

Tagging @dotnet/roslyn-ide, @Pilchie
</PullRequestDescription>
    <CreatedDate>09/12/2015</CreatedDate>
    <ClosedDate>10/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7330</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix C# cast simplification issue where removal of a cast can break an implicitly-typed array</Title>
    <PullRequestDescription>Fixes #6966

Tagging @dotnet/roslyn-ide 
</PullRequestDescription>
    <CreatedDate>08/12/2015</CreatedDate>
    <ClosedDate>09/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7317</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Constant-folding should not use excess precision.</Title>
    <PullRequestDescription>Fixes #7262 

The Roslyn C# compiler stores constants of type `System.Single` (i.e. `float`) internally as type `double`, but without truncating the value to the required precision. Also, it computes binary constant-folded operators incorrectly, essentially computing the operation in double precision. It also ignores explicit casts to `float`, as those are considered identity conversions, but the language spec required that we truncate precision when we see such a cast.

This change causes floating-point constant-folding operations to be done in precisely the proper precision, and causes casts to truncate precision. With the first change, the latter change may turn out to be a no-op (when the value is already a float, it should already have the correct value with the correct precision), but I'm doing it for completeness.

@dotnet/roslyn-compiler Please review.
</PullRequestDescription>
    <CreatedDate>08/12/2015</CreatedDate>
    <ClosedDate>14/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7312</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix VB outlining banner text to not break onto multiple lines</Title>
    <PullRequestDescription>Fixes #6927

There's a functional change from what we had in RTM in that we will now show ByVal in the banner text if the user has it in their code. This is a very small detail though and we didn't ever remove ByVal here in Dev12.

Tagging @dotnet/roslyn-ide 
</PullRequestDescription>
    <CreatedDate>07/12/2015</CreatedDate>
    <ClosedDate>09/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7250</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix VB using `ISingleValueCaseClause` as `ElseCaseClause`'s corresponding node in IOperation tree</Title>
    <PullRequestDescription>Unlike C# using a `BoundSwaitchLabel` with  `ExpressionOpt == null` to represent a `default` case, in VB, the bound node for `Case Else` statement is not a `BoundSimpleCaseClause` with both `ValueOpt` and `ConditionOpt` equal to `Nothing`. It actually uses a `BoundCaseStatement` with an empty `CaseClauses` array.

This is a part of #6894

@JohnHamby, you have handled it correctly in `BoundCaseBlock`, could you please take a look to see if this change makes sense?
</PullRequestDescription>
    <CreatedDate>05/12/2015</CreatedDate>
    <ClosedDate>09/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7217</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Explicitly remove code model elements from the CleanableWeakComHandleTable when they are deleted</Title>
    <PullRequestDescription>Fixes #7216

There are WinForms scenarios where code model elements can be deleted and re-added, for example, when the modifiers of a control on the designer surface are changed the control will be deleted and immediately re-added. We must be sure to delete the element's node key from the CleanableWeakComHandleTable or else an exception will be thrown when the element is re-added with the same node key.

Tagging @dotnet/roslyn-ide for review
</PullRequestDescription>
    <CreatedDate>03/12/2015</CreatedDate>
    <ClosedDate>04/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7212</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure that an EnvDTE.CodeParameter.Name returns the correct value for parameters defined in metadata</Title>
    <PullRequestDescription>Fixes #7210

The issue is that the symbol display system will not return a name for a parameter unless SymbolDisplayParameterOptions.IncludeName is set. This behavior seems like it might ultimately be a bug in symbol display as that option is intended to control the display the parameters owned by the targeted symbol, but probably shouldn't affect the display of the targeted symbol. However, rather than updating symbol display (which would potentially have larger downstream impact), we'll just include the option in this case.
#7211 has been filed for the symbol display issue.

Tagging @dotnet/roslyn-ide for review
</PullRequestDescription>
    <CreatedDate>03/12/2015</CreatedDate>
    <ClosedDate>04/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7186</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Code Model: GetTypeSymbolFromFullName should not return unpredictable results when the type name was in an unsupported format</Title>
    <PullRequestDescription>Fixes #7179 

Tagging @dotnet/roslyn-ide
</PullRequestDescription>
    <CreatedDate>02/12/2015</CreatedDate>
    <ClosedDate>03/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>7016</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix `InteractivePasteCommandHandler` to handle line-copy and box-copy</Title>
    <PullRequestDescription>The paste of line-copied and box-copied content from Interactive Window was broken in VS editor.

For line-copied content, if we hit CTRL + C in interactive window as follows (| indicate caret position):

``` cs
Microsoft (R) Roslyn C# Compiler version 42.42.42.42
Loading context from 'CSharpInteractive.rsp'.
Type "#help" for more information.
&gt; int |x = 10;
&gt; 
```

And hit CTRL + V in a VS editor for any Roslyn type (e.g. a csx file):

``` cs
int y = 10;
int z| = 10;
```

We will get this today:

``` cs
int y = 10;
int zint x = 10;
 = 10;
```

This is after the fix:

``` cs
int y = 10;
int x = 10;
int z = 10;
```

For box-copied content, if we hit CTRL + C in interactive window as follows (| indicates selection):

``` cs
Microsoft (R) Roslyn C# Compiler version 42.42.42.42
Loading context from 'CSharpInteractive.rsp'.
Type "#help" for more information.
&gt; int |x = 10|;
&gt; int |w = 10|; 
```

And hit CTRL + V in a VS editor for any Roslyn type (e.g. a csx file):

``` cs
int y| = 10;
int z| = 10;
```

We will get this today:

``` cs
int yx = 10w = 10 = 10;
int zx = 10w = 10 = 10;
```

This is after the fix:

``` cs
int yx = 10 = 10;
int zw = 10 = 10;
```

@dotnet/roslyn-interactive 
</PullRequestDescription>
    <CreatedDate>24/11/2015</CreatedDate>
    <ClosedDate>02/12/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>6451</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix unit test that was mistakenly changed in PR 6434</Title>
    <PullRequestDescription>This is a fix for unit test broke by https://github.com/dotnet/roslyn/pull/6434
</PullRequestDescription>
    <CreatedDate>30/10/2015</CreatedDate>
    <ClosedDate>30/10/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>5519</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Support correct F1 help keywords in Object Browser</Title>
    <PullRequestDescription>Fixes #5515

tagging @dotnet/mlangide -- especially @rchande for the F1 Help changes
</PullRequestDescription>
    <CreatedDate>29/09/2015</CreatedDate>
    <ClosedDate>29/09/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>5319</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Don't suggest removing necessary boxing casts in conditional expressions</Title>
    <PullRequestDescription>Fixes issue #5314
</PullRequestDescription>
    <CreatedDate>17/09/2015</CreatedDate>
    <ClosedDate>18/09/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>5029</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Don't suggestion removing redundant cast inside string interpolations unless the types of the expression before and after removing the cast are compatible</Title>
    <PullRequestDescription>Fixes #4037

Reviewers: @balajikris, @brettfo, @CyrusNajmabadi, @davkean, @dpoeschl, @jasonmalinowski, @jmarolf, @Pilchie, @rchande
</PullRequestDescription>
    <CreatedDate>04/09/2015</CreatedDate>
    <ClosedDate>09/09/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>4552</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Redirect URL of compiler documentation to github.</Title>
    <PullRequestDescription>Fixes #4250 

@VSadov @AlekseyTs @jaredpar @agocke Please review.
</PullRequestDescription>
    <CreatedDate>13/08/2015</CreatedDate>
    <ClosedDate>17/08/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>4545</PullRequestID>
    <RepoID>1</RepoID>
    <Title>A nameof() expression is always legal in an expression tree, as it is a constant</Title>
    <PullRequestDescription>Fixes #3923

(The analogous situation isn't a bug in VB)

@AlekseyTs @VSadov @jaredpar @agocke Please review
</PullRequestDescription>
    <CreatedDate>13/08/2015</CreatedDate>
    <ClosedDate>14/08/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>4363</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Don't skip executing analyzer compilation actions in the IDE when Clo…</Title>
    <PullRequestDescription>…sedFileDiagnostics flag is turned off OR the analyzer reports only hidden diagnostics. Compilation actions and compilation end actions can report diagnostics on open files, so they must always be executed.

Fixes #4068
</PullRequestDescription>
    <CreatedDate>05/08/2015</CreatedDate>
    <ClosedDate>06/08/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>4201</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Remove namespaces from ScriptOptions.Default</Title>
    <PullRequestDescription>The IDE does not consume `ScriptOptions.Default` so the IDE and the host
were out of sync.  For example, `typeof(Console)` would be squiggled
in the Interactive window but would evaluate correctly when submitted.

Fixes #4154
</PullRequestDescription>
    <CreatedDate>29/07/2015</CreatedDate>
    <ClosedDate>29/07/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3840</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Include usings debug info for expr-bodied members</Title>
    <PullRequestDescription>They were getting dropped in `MethodCompiler.BindMethodBody`.
</PullRequestDescription>
    <CreatedDate>06/07/2015</CreatedDate>
    <ClosedDate>06/07/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3527</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Report rude edit when partially executed active statement is deleted</Title>
    <PullRequestDescription>Fixes #3295.

**Scenario**
F5, comment out "Stop" statement, F10:

``` VB
Module Module1                
Sub Main()                          
   Stop                                
   Console.WriteLine(1)       
   Console.WriteLine(2)          
End Sub
End Module
```

The debugger skips "Console.WriteLine(1)" and ends up stopping on "Console.WriteLine(2)".

**Fix**
#3295 was addressed before on Roslyn side but a fix on debugger side was needed as well in order to fix the E2E scenario. Now that both fixes are in place the validation of E2E scenario is possible. The scenario is still not working -- a check is missing in Roslyn EnC logic. Only one out of two code paths were covered by the previous fix. This fix takes care of the other code path as well.

**Testing**
Unit test and E2E validation on the latest D14Rel bits.

@ManishJayaswal 
</PullRequestDescription>
    <CreatedDate>16/06/2015</CreatedDate>
    <ClosedDate>16/06/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3426</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Pass (IntPtr)(-1) to ThrowExceptionForHR calls to ignore existing error info</Title>
    <PullRequestDescription>Port PR #3423 to master. The fix in stabilization was rejected by Shiproom. So, this is the same fix in master.
</PullRequestDescription>
    <CreatedDate>10/06/2015</CreatedDate>
    <ClosedDate>14/06/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3353</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Avoid assembly name resolution when loading analyzer type</Title>
    <PullRequestDescription>Fixes #3347.

**Scenario**
TypeScript got broken by my previous change in analyzer loading logic. I didn't realize that we load analyzers to "load-from" context which is not where Type.GetType(assembly-qualified-name) is looking for assemblies. 

**Fix**
The purpose of the previous change was to communicate the load exception to the user. Unfortunately, portable profile 7 doesn't have the overload of Assembly.GetType that throws (hence the change to Type.GetType, which does). Turns out that the method is actually available on CoreCLR, so we can use the PortableShim to invoke it thru reflection to retrieve a good error message.

**Testing**
Added unit tests and verified that TS analyzer works as expected.

@ManishJayaswal 
</PullRequestDescription>
    <CreatedDate>05/06/2015</CreatedDate>
    <ClosedDate>08/06/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3333</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Update versions of Microsoft.DiaSymReader and Microsoft.NetFX20 packages to release versions 1.0.5 and 1.0.3, respectively</Title>
    <PullRequestDescription>The packages are currently versioned as pre-release "rc2", which is not appropriate for RTM.

@ManishJayaswal 
</PullRequestDescription>
    <CreatedDate>05/06/2015</CreatedDate>
    <ClosedDate>05/06/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3301</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Dev14RTM: Don't try to get IVsLanguageBlocks in a language that doesn't support SyntaxTrees.</Title>
    <PullRequestDescription>
    </PullRequestDescription>
    <CreatedDate>04/06/2015</CreatedDate>
    <ClosedDate>08/06/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3298</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Option page fixes</Title>
    <PullRequestDescription>Some fixes around formatting options.
- Make sure the settings correctly roam and are shown
- Make sure radio buttons actually work how you think they do
</PullRequestDescription>
    <CreatedDate>04/06/2015</CreatedDate>
    <ClosedDate>05/06/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3294</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Don't pretty-list away line continuation characters in VB 9 or earlier</Title>
    <PullRequestDescription>**Customer scenario**: VB customer has legacy project targeting an earlier version of the language. If they use Visual Studio 2015, we shouldn't remove their line continuation characters and break their program.

The scenario this fix directly solves was filed on Microsoft Connect [here](https://connect.microsoft.com/VisualStudio/feedback/details/1035813/connect-vb-14-compiler-removes-line-continuations-even-when-web-config-specifies-vb-8-as-compiler). Essentially, this was filed by a customer who has a VB Web Site which specifically targets Visual Basic 8.0 for legacy reasons and can't use Visual Studio 2015 with the project.

**Description of fix**: Don't run the Remove Unnecessary Imports code cleaner if the LanguageVersion is VB 9 or earlier. This addresses the customer-reported scenario because the VB Web Site project system will set the language version to VB 9 if the target framework is less than 4.0.

**Testing done**: Unit tests added. Manually verified customer scenario.

**Sterling reviewers**: @Pilchie, @dpoeschl, @jasonmalinowski, @rchande, @AnthonyDGreen 
</PullRequestDescription>
    <CreatedDate>03/06/2015</CreatedDate>
    <ClosedDate>04/06/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3286</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Code Model: Fix issue with parented code model objects corrupting their parents</Title>
    <PullRequestDescription>Fixes TFS Issue 858153

This is a fairly involved issue that can manifest in a number of ways. Currently, the only known scenario where this is exposed within VS is the "Convert to Web Application" command but there are certainly others and customers using Code Model could easily run into it.

**Customer Scenario**: The scenario is essentially this:
1. In Code Model, grab and hold a reference to a code model object for some container element.
2. Access a certain type of child element parented by that container. In particular, a property accessor, an event accessor, an attribute, an attribute argument, a VB Inherits statement, a VB Implements statement, or using directive/Imports statement.
3. Try to access a property on the container reference in step 1.
4. Exception gets thrown!

Understanding why this happens will require understanding a few of the system concepts underlying Code Model.

First, Code Model elements tend to have long lifetimes that live through file edits and even renames. For example, one could grab a reference to an `EnvDTE.CodeClass` and hold onto it. As the user makes edits to the file containing that class the class element should continute to be valid (until the user makes an edit that breaks it). Since their lifetimes can be potentially long, Code Model elements hold onto "node keys" rather than the SyntaxTree nodes, which they use to get back to their underlying node in the source file.

Node keys have a very simple format. Essentially, they are the "name" of the node (qualified syntactically) along with an ordinal which allows there to be multiple nodes with the same name. Consider the following code:

``` C#
namespace N
{
partial class C
{
void M() { }
}

partial class C
{
}
}
```

In the code above, there are four potential Code Model elements with the following node keys:
- N, 1
- N.C, 1
- N.C.M, 1
- N.C, 2

Second, some Code Model elements don't actually have node keys. These are objects that are parented by other code model objects. For example, parameters are parented within a method or propery, property accessors are parented within a property, etc. These "keyless" objects can be a bit tricky because they need to hold a reference to their parent object.

Third, each FileCodeModel maintains a cache of Code Model elements using their node keys. Whenever a Code Model element is going to be created for a particular node key, the FileCodeModel first checks to see an element already exists. If so, it returns the cached element instead.

With that background, here's what's happening:

In several cases, creating a parented keyless Code Model element was skipping the lookup in the FileCodeModel's cache when creating it's parent. So, if an element represent the parent already existed in the cache, a second Code Model element would be created for the same node. This gets ugly because the process creating a Code Model element causes it to be added to the FileCodeModel's cache. So, there is an attempt to add the newly created Code Model element when there's already one present in the cache with the same node key.

Ideally, this situation would have thrown an exception. However, when there's a collision, there's a code path in the FileCodeModel's cache that tries to find a free slot in the cache by changing the original of the element's node key. This [code](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Impl/CodeModel/FileCodeModel.ElementTable.cs#L47) is super-suspicious and is, quite honestly, probably wrong. However, removing it is a risky at this point. So, I'll look at cleaning this up in the master branch.

For now, I've audited all of the places where a parented keyless Code Model element constructs its parent and ensures that it goes through the FileCodeModel's lookup.

**Testing Done**: Unit tests have been added which fail without the fix and pass with it. Additionally, an assert was temporarily added to the bad code path to find other unit tests that expose this issue. (The assert was removed from this PR but may be added in master to catch other problems.) Finally, the original scenario, "Convert to Web Application", has been manually tested and now runs properly.

**Reviewers**: @Pilchie, @pharring, @jasonmalinowski, @basoundr
</PullRequestDescription>
    <CreatedDate>03/06/2015</CreatedDate>
    <ClosedDate>04/06/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3242</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Code Model: When setting the name of a CodeElement, ensure that its members are updated</Title>
    <PullRequestDescription>**Customer Scenario**: This bug can manifest in many ways as its an issue in the Code Model implementation, but the scenario reported is as follows:
1. Create a V1 Workflow Sequential Console Application project (targeting .NET Framework 3.5).
2. Click on the Workflow Designer
3. In the Properties window, change the (Name) of the workflow to something else (e.g. "NewWorkflow")

This results in a very unhelpful dialog:

![image](https://cloud.githubusercontent.com/assets/116161/7924876/de78e592-0873-11e5-8cc2-c38d64be3215.png)

When the user clicks OK, the (Name) property gets reverted to what it was before. However, the name was actually partially changed by the time the exception was thrown. So, the user finds that several files have been modified but the process was incomplete.

**Fix Description**: Code Model tracks nodes with a "node key" concept, which is effectively the full name of an element coupled with an ordinal. When the name of a `CodeElement` is modified view `SetName`. its node key must also be updated since the name of the underlying node has changed. However, we had failed to update the node keys of any members of that `CodeElement`, which means that they can no longer be located after their parent container's name changes. This is now fixed by using the same `NodeKeysValidation` helper that `CodeElement.RenameSymbol` uses.

**Testing Done**: Manually verified customer scenario working properly, and added unit test that fails without the fix and passes with the fix. Additionally, the Workflow team has been given private binaries with the fix to run their automation against.

Pinging @jasonmalinowski, @Pilchie, @pharring as stellar reviewers.
</PullRequestDescription>
    <CreatedDate>01/06/2015</CreatedDate>
    <ClosedDate>03/06/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3181</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Make CodeModel.CodeTypeFromFullName rational when returning types that appear in generated code files</Title>
    <PullRequestDescription>Fixes TFS Issue 1107453

**Customer Scenario**: This addresses a problem that can occur when CodeModel.CodeTypeFromFullName is used to determine the right location to modify user code. In the case of XAML apps, there are several generated files that shouldn't be modified which contain partial parts of class that also appear in user code (e.g. App.cs, App.g.cs, etc.). Previously, CodeTypeFromFullName might return one of these files as a location, breaking whatever feature was trying to modify the user's code.

**Description of Change**: CodeModel.CodeTypeFromFullName should prefer locations within source files that are not generated (using the same heuristic we use within the Generate Type dialog to determine whether a source file is "generated"). However, if the locations are _all_ within generated sources, just return the first one. That way, searching for a type within code produced by a VS single file generator, such as "Resources.Designer.cs", would still work.

**Testing Done**: Unit tests have been added for this scenario in C# and VB that test a handful of permutations of generated and non-generated code with partial classes. Additionally, the Code Model unit testing infrastructure has been updated to support TestWorkspaces with multiple documents.

Potential reviewers: @Pilchie, @jasonmalinowski, @pharring, @dpoeschl, @rchande, @brettfo, @balajikris, @basoundr 
</PullRequestDescription>
    <CreatedDate>29/05/2015</CreatedDate>
    <ClosedDate>29/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3168</PullRequestID>
    <RepoID>1</RepoID>
    <Title>EnC: Handle anonymous types and delegates hoisted to closure or state machine</Title>
    <PullRequestDescription>Fixes 1170899: fatal error during EnC.
Fixes #3233, #3192.

**Scenarios**
When editing a method multiple times that contains a variable of an anonymous type (or delegate in VB) that is hoisted to a closure or a state machine the debugger reports a fatal error and terminates debugging session. 

Examples:

``` VB
    Sub Main()
        Dim x = Function(n As Integer) n + 1
        Dim y = Sub(n As Integer) Console.WriteLine(x(n))
        y(100)
    End Sub
```

``` C#
        static void Main(string[] args)
        {
            var result =
                from a in args
                let x = a.Reverse()
                let y = x.Reverse()
                where x.SequenceEqual(y)
                select new { Value = a, Length = a.Length };            
        }
```

**Fix**
We didn't deeply translate anonymous types/delegates before comparing them in symbol matcher.
The proposed fix for RTM isn't ideal but addresses the issues and avoids risky changes. A proper fix requires extensive changes in symbol translations and should be implemented post RTM.

**Risk**
Although not ideal I'm confident that that fix is addressing the root cause of the issue. The fix introduces new code paths which are all covered by newly added unit tests. These code paths are only exercised during EnC specific code generation and emit and are not taken during regular compilation, which limits the impact only to EnC scenarios.

**Testing**
Added unit tests and manually verified that affected scenarios work for both VB and C#. Buddy tested by @wschae and @amcasey. 

@ManishJayaswal 
</PullRequestDescription>
    <CreatedDate>29/05/2015</CreatedDate>
    <ClosedDate>05/06/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3158</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure that FormattableString is preferred by Introduce Explaining Variable and Extract Method</Title>
    <PullRequestDescription>Fixes Issue #3147

When extracting an interpolated string that is target-typed to FormattableString, the resulting declaration should use FormattableString as the type rather than string. Otherwise, the result is uncompilable code.

Consider the following code:

``` C#
void M()
{
    var s = System.FormattableString.Invariant($"");
}
```

If `$""` is selected, Introduce Explaining Variable should produce this:

``` C#
void M()
{
    System.FormattableString v = $"";
    var s = System.FormattableString.Invariant(v);
}
```

...rather than this:

``` C#
void M()
{
    var v = $"";
    var s = System.FormattableString.Invariant(v);
}
```

Added unit tests for both Introduce Explaining Variable and Extract Method in both C# and VB.

Note that this really isn't the _correct_ fix for Introduce Explaining Variable. There should be a simplification step that determines whether a local declaration's type is changed to var (respecting the user's options), but that's not how it was implemented. However, doing that is a larger change that is probably not appropriate for the stabilization branch. So, there are some edge cases that will slip through with this change, but they are not as functionally broken as the case this change fixes.
</PullRequestDescription>
    <CreatedDate>28/05/2015</CreatedDate>
    <ClosedDate>29/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3138</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Remove superfluous sequence point emitted by VB await spiller</Title>
    <PullRequestDescription>Fixes internal bug 1092037: Compiler outputs multiple sequence points in VB await statement messing up stepping

**Scenario**
Stepping over Await expression requires more than one "step-over" action due to superfluous sequence points emitted by VB await spiller. For example, 

```
    Async Function F() As Task(Of Boolean)
        Dim z = Await Task.FromResult(1)   // break here, F10 doesn't move to the next statement

        Dim x = Sub()
                    Console.WriteLine(z)
                End Sub

        Return False
    End Function
```

**Testing**
Unit tests and manual validation that stepping in VS is correct.

@ManishJayaswal 
</PullRequestDescription>
    <CreatedDate>28/05/2015</CreatedDate>
    <ClosedDate>28/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3131</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Avoid using GetEntireImage for detecting empty images as it maps the entire PE into memory in case of memory mapped PE image</Title>
    <PullRequestDescription>Fixes internal bug 1178264 (VM regression).

**Scenario**
VM footprint of debugging start regressed.

@ManishJayaswal 
</PullRequestDescription>
    <CreatedDate>27/05/2015</CreatedDate>
    <ClosedDate>28/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3130</PullRequestID>
    <RepoID>1</RepoID>
    <Title>The mapping to metadata should use the original anonymous type map, not the map translated to the previous generation</Title>
    <PullRequestDescription>Fixes internal bug 1170706: 2nd edit of a method containing anonymous types produced an invalid TypeRef leading to a crash in EE.

**Scenario**

```
using System;
class Program
{
    static void Main(string[] args)
    {
        var v = new { A = 1, B = true };
    }
}
```

Update the method twice and then evaluate expression in EE, which crashes.
This issue also leads to locals disappearing after 2 edits.

**Tests**
Added unit tests. Manually verified the scenario works now.

@ManishJayaswal 
</PullRequestDescription>
    <CreatedDate>27/05/2015</CreatedDate>
    <ClosedDate>28/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>3000</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Correct the copyright header on four files.</Title>
    <PullRequestDescription>Four of our files have remnants from when we were selecting a license. Corrected herein to have only the correct, final license header.

@tmat Please review.
</PullRequestDescription>
    <CreatedDate>21/05/2015</CreatedDate>
    <ClosedDate>21/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2996</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ensure that calls into EnvDTE.CodeModel work even if the underlying FileCodeModel has not been realized</Title>
    <PullRequestDescription>Fixes issue #2893.

When calling into an EnvDTE.CodeModel API, the caller must pass the file name of the file to be operated on. For example:

var ns = codeModel.AddNamespace("MyFile.cs", "MyNamespace");

However, the implementation EnvDTE.CodeModel would only ever succeed to find the FileCodeModel for "MyFile.cs" if had already been created and cached. If the FileCodeModel wasn't in the cache, the API that was called would throw.

Ultimately, this comes down to a set of APIs with bad names that don't reflect that they only return cached values. This change renames those APIs to give them proper names (e.g. TryGetCachedFileCodeModelInstance) and adds an API that will retrieve a cached FileCodeModel or create a new one if needed.

Testing this is problematic, as it requires Visual Studio to be present. The only way to create an automated test would be through a VS-only integration test, which seems like overkill. To verify, I manually created a VS package containing the repro code in #2893 and verified that works as expected with my change.
</PullRequestDescription>
    <CreatedDate>21/05/2015</CreatedDate>
    <ClosedDate>21/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2977</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Port2966</Title>
    <PullRequestDescription>**Customer scenario:**
A Watson crash (NullReferenceException) caused by an incomplete InternalsVisibleTo specification can occur when working with VB or C# code.

**Testing**
Verified by adding a new unit test and manual testing.

**Ask Mode**
Tenet affecting: Reliability

See original PR #2966
See Watson bug in TFS: 1174256
</PullRequestDescription>
    <CreatedDate>21/05/2015</CreatedDate>
    <ClosedDate>21/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2939</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Guard against concurrent callbacks into analyzers in IDE</Title>
    <PullRequestDescription>**Customer scenario:** We need to do so for couple of scenarios:
1. Different diagnostic clients might end up requesting diagnostics at the same time and hence end up attempting to invoke into the same analyzer simultaneously.
2. FixAll occurrences computes diagnostics in parallel, hence can causes concurrent callbacks.

If the analyzer hasn't been written in a thread-safe way, then concurrent callbacks into it can cause analyzers to produce incorrect/misleading/duplicate diagnostics or the analyzer itself might throw and never execute again in the VS session.

**Fixes #2410**

**Testing:** There is no functional change here, so existing tests provide adequate coverage. I manually verified that FixAll performance is acceptable for simplify name/remove unnecessary usings across projects/solution in Roslyn.sln

/cc @srivatsn @ManishJayaswal Note that this is an identical change as #2833 (which was in the main repot). This one is directly in the stabilization branch. I already have couple of signoffs on #2833, so I just need your approval.
</PullRequestDescription>
    <CreatedDate>20/05/2015</CreatedDate>
    <ClosedDate>21/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2912</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix Code Model bug with adding attributes in presence of XML doc comments</Title>
    <PullRequestDescription>Addresses issue #2825.

Code Model must insert attributes below XML doc comments. Otherwise, this can change the intent of the user's code.
- In C#, it's bad. If an attribute appears above an XML doc comment for a member, the attribute is attached to the member but the XML doc comment will not be emitted.
- In VB, it's worse. If an attribute appears above an XML doc comment for a member, the attribute isn't actually attached to the member!

The approach taken is pretty simple: if an attribute is being inserted at the front of the list, just copy the existing leading trivia to it. In addition, extra care is taken in VB to ensure that the attribute has a trailing line break.

Unit tests have been added to handle every potential CodeElement that may encounter this situation. These also uncovered several other bugs, including lack of support for C# event fields and VB delegate statements.
</PullRequestDescription>
    <CreatedDate>19/05/2015</CreatedDate>
    <ClosedDate>21/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2803</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Rationalize Code Model "member node" logic</Title>
    <PullRequestDescription>Code Model has several ways of looking at the member nodes of a particular container. Sometimes it does so recursively, flattening all nested members into a single list. Sometimes, it looks for "logical" nodes, i.e. breaking up field declarations into their component declarators. Sometimes only supported nodes (that is, nodes that can be properly represented in Code Mode) are expected.

Unfortunately, the internal APIs for these searches grew up organically and have become quite a mess. There were several places where the wrong search was being used, resulting in strange bugs.

These concepts are now consolidated into a single GetMemberNodes() method and all callsites have been reviewed and updated.

Note: The particular bug that this change addresses is about inserting a node into a container that contains an incomplete member. In that case, the code used a "flattened" list to find the index where the node was to be inserted. What it really wanted was a "logical" list, but that was conflated with "flattening".
</PullRequestDescription>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>15/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2740</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Remove duplicate sequence point and unnecessary nops emitted to VB iterators</Title>
    <PullRequestDescription>Fixes #2736.
</PullRequestDescription>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2733</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Generalize assert to include source statements that result in bound try</Title>
    <PullRequestDescription>Fixes #2567 
@AlekseyTs @VSadov @agocke @jaredpar Please review
</PullRequestDescription>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2732</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Pass correct context type to runtime binder</Title>
    <PullRequestDescription>Runtime binder calls take a System.Type that they use for things like
accessibility checks.  The expression compiler was incorrectly passing the
result type it synthesized and the regular compiler was incorrectly
passing a nested type in the async lambda case.

Fixes #878
</PullRequestDescription>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2692</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix issue with C# character literals in InitializeComponent() method</Title>
    <PullRequestDescription>In C#, if a WinForms InitializeComponent method() includes character
literal containing a unicode escape for a character that is not valid in
XML, it can cause an XML parser exception to be thrown and the WinForms
designer not to load. To work around this problem, we generate a hidden
cast expression in the IMethodXML to cast the numeric value of the
character to a System.Char.  We do this for any character that isn't a
letter or digit. The designer can process this cast in the XML correctly and load
properly.
</PullRequestDescription>
    <CreatedDate>12/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2682</PullRequestID>
    <RepoID>1</RepoID>
    <Title>A method declared with __arglist is not a candidate with a keyword argument list</Title>
    <PullRequestDescription>Fixes #2631

This repairs the compiler crash reported in #2631. The problem was we were not preventing an __arglist method from being considered a candidate when the argument list uses keyword notation. That ain't never gonna work because there would be no way to specify the __arglist parameter (it has no name).

@VSadov @AlekseyTs @agocke Please review.
</PullRequestDescription>
    <CreatedDate>12/05/2015</CreatedDate>
    <ClosedDate>13/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2479</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Setting next statement inside a scope with a lambda cause NRE</Title>
    <PullRequestDescription>This happens since setting next statement skips the closure initialization, which marks as hidden sequence point. 

In this PR, we emit a regular sequence point instead of a hidden sequence point to closure initialization when it is located inside of conditional blocks like 'if (b) { ... }', so IP move won't skip closure initialization.
</PullRequestDescription>
    <CreatedDate>04/05/2015</CreatedDate>
    <ClosedDate>06/05/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>2187</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Emit anonymous delegates, used for dynamic, in deterministic order</Title>
    <PullRequestDescription>Fixes #1440 
@tmat @AlekseyTs @agocke @VSadov 
</PullRequestDescription>
    <CreatedDate>22/04/2015</CreatedDate>
    <ClosedDate>23/04/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>1756</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Avoid InvalidCastException in GetTypeInfo implementation on XmlString in cref.</Title>
    <PullRequestDescription>
    </PullRequestDescription>
    <CreatedDate>02/04/2015</CreatedDate>
    <ClosedDate>02/04/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>1395</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix memory leaks in AnalyzerManager</Title>
    <PullRequestDescription>1) Statically created LocalizableString instances by analyzers were holding onto instances of AnalyzerExecutor (which holds onto the compilation on which it executes) for exception reporting, causing us to leak compilations in command line builds. Fixed this by making sure that we unregister these exception handlers during analyzer cleanup in CommonCompiler, we already did so for VisualStudioAnalyzer created in IDE.

2) Switch AnalyzerManager._compilationScopeMap to have a ConditonalWeakTable value. Performance analysis showed that analyzers that capture the CompilationStartAnalysisContext in its RegisterCompilationStartAction via some lambda were rooting the compilation objects.

Above two changes got rid of all the static and dependent handles rooting compilations during command line builds, and I see a perceived reduction in memory used by VBCSCompiler during building Roslyn.

3) Fix the IDE onAnalyzerException delegate to not capture project instance, but instead use the projectId. Otherwise, VSIX analyzers that live for lifetime of VS instance would leak compilations.

While I was at it, I also got rid of functionality added to MetadataCache that was caching and re-using analyzer instances across AnalyzerFileReference instances, we had already decided to instead keep lifetime of analyzer instances bound by lifetime of owning AnalyzerFileReference.

@heejaechang @tmeschter @pharring @srivatsn @JohnHamby can you please review?
</PullRequestDescription>
    <CreatedDate>19/03/2015</CreatedDate>
    <ClosedDate>20/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>1379</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix IsDiagnosticAnalyzerSuppressed check for analyzers that have NotConf...</Title>
    <PullRequestDescription>...igurable diagnostics which are disabled by default.

Current logic didn't account for the fact that even though these descriptors are non-configurable, they might be turned off by default and hence be suppressed.

@shyamnamboodiripad @srivatsn @JohnHamby @heejaechang @tmeschter @jmarolf can you please review?
</PullRequestDescription>
    <CreatedDate>19/03/2015</CreatedDate>
    <ClosedDate>19/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>1250</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Consider MVID when testing EC cache validity</Title>
    <PullRequestDescription>Our EvaluationContext cache invalidation computation was consuming the
method token and version, but not the identity of the declaring assembly.
This lead to a strange bug where we would reuse the cache across assembly
boundaries if consecutive breakpoint happened to have the same method
token (each in its own assembly).

I believe this bug existed before I revised the cache invalidation
computation and we were just getting lucky - we used to check the spans
of all containing scopes, which are unlikely to match exactly across
assemblies.
</PullRequestDescription>
    <CreatedDate>13/03/2015</CreatedDate>
    <ClosedDate>13/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>1229</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Use ISymUnmanaged* from Microsoft.DiaSymReader</Title>
    <PullRequestDescription>Rebased from https://github.com/tmat/roslyn/tree/DiaSymReader and updated for new sources.
</PullRequestDescription>
    <CreatedDate>12/03/2015</CreatedDate>
    <ClosedDate>13/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>1202</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Handle not-yet-loaded projects in GetENCBuildState</Title>
    <PullRequestDescription>VsENCRebuildableProjectImpl.GetNECBuildState was not accounting for the
possibility that there might not (yet) be a roslyn project for a given VS
project.  If we ever encounter this, we should just report that the
project is unchanged.

We have a number of dumps for this issue, but no concrete repro steps.
</PullRequestDescription>
    <CreatedDate>11/03/2015</CreatedDate>
    <ClosedDate>12/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>1170</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix a build break by adding a parameter to an otherwise parameterless struct ctor</Title>
    <PullRequestDescription>
    </PullRequestDescription>
    <CreatedDate>10/03/2015</CreatedDate>
    <ClosedDate>10/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>1153</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Prototype: New cache-invalidation strategy</Title>
    <PullRequestDescription>Ignoring references, which are obviously the high-order bit, the old
strategy was to confirm that the methodToken, methodVersion, and smallest
containing scope were the same as the current context.  This had two
problems:

1) C# hoisted locals are not reflected in scopes and so we were not
invalidating the cache when we stepped across scope boundaries in async
and iterator methods.

2) We had to access the PDB in order to check whether the cache was still
valid (to figure out the smallest containing scope).

We propose a new approach: compute the largest span around the current IL
offset in which there are no scope boundaries (including hoisted local
scopes).  Then, when check cache validity by doing a simple span
containment check (plus methodToken and methodVersion, obviously).

Downside 1: We need all scopes in the method, not just the containing
ones.

Downside 2: If you somehow step around a nested scope (e.g. using
breakpoints), the new approach will invalidate the cache, whereas the old
one did not.

TODO: Fix up the tests of the old caching mechanism (white box tests of
scope comparisons).

TODO: Add tests of the new span computation (there are already tests that
the hoisted local scope issue is resolved).
</PullRequestDescription>
    <CreatedDate>10/03/2015</CreatedDate>
    <ClosedDate>10/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>1115</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Provide explicit `StringComparison.Ordinal` in invocations of Xunit methods</Title>
    <PullRequestDescription>**MAIN CHANGES:**
- Fix #1108. Provide explicit `StringComparison.Ordinal` in invocations of Xunit methods `Assert.Contains` and `Assert.DoesNotContain`
- Unskip test `CommandLineTests.PreferredUILang`

**ALSO:**
- Fix a typo in a comment: "reversed" -&gt; "reserved"
- Remove unnecessary `string.Trim()` invocations
- Remove unnecessary `using` directives

See the explanation of these changes in #1108.
</PullRequestDescription>
    <CreatedDate>07/03/2015</CreatedDate>
    <ClosedDate>09/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>1037</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Copy ResultProvider sources, rather than binaries</Title>
    <PullRequestDescription>We need to produce two copies of each ResultProvider DLL, one that runs on
NetFX20 and one that is Portable.  We originally believed that we could
create a single DLL that would work for both and so we just copied the
output of each ResultProvider project and signed it with a different
Authenticode certificate.  Now we know that - even though the source of
both versions will be the same - we need to actually recompile for
Portable.

As a first step, we eliminate the copying mechanism and split each
ResultProvider project in two.  To minimize duplication, we introduce
shared projects that hold on to most of the source.

The next step will be to make the two copies reference different
assemblies.
</PullRequestDescription>
    <CreatedDate>05/03/2015</CreatedDate>
    <ClosedDate>05/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>997</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Removes unused reference to BasicCodeAnalysis.Desktop.vbproj</Title>
    <PullRequestDescription>
    </PullRequestDescription>
    <CreatedDate>03/03/2015</CreatedDate>
    <ClosedDate>03/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>975</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Ask for bytes of not-yet-loaded winmds</Title>
    <PullRequestDescription>When we try to bind something that is from a not-yet-loaded winmd, we
generally see ErrorCode.ERR_DottedTypeNameNotFoundInNS because the
namespace Windows.X is only provided by Windows.X.winmd.  When this
occurs, heuristically ask the debugger for an assembly with name Windows.X
and content type AssemblyContentType.WindowsRuntime.

The VB equivalent of ERR_DottedTypeNameNotFoundInNS is ERR_NameNotMember2.
However, VB also has a second error code to consider: ERR_UndefinedType1,
which is only produced in type-only contexts.  Since the argument to
ERR_UndefinedType1 is the qualified name, as a string, we have to do some
extra work to determine the next part that needs to be resolved.

Caveat: This doesn't work end-to-end (DevDiv #1130191).
</PullRequestDescription>
    <CreatedDate>02/03/2015</CreatedDate>
    <ClosedDate>03/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>960</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Suppress embedded declarations in the EE</Title>
    <PullRequestDescription>The expression compiler returns information to the debugger in the form
of .NET assemblies.  These assemblies should not contain embedded
declarations (i.e. "My.*").  At best, these declarations are useless.  At
worst, they hide the declarations in the user's own assembly.

As a bonus, this fixes an issue we were having with being unable to
compile the embedded declarations in cases where two copies of
EditorBrowsableAttribute were loaded (since neither is "closer" or more
accessible while debugging).

Fixes #946.
</PullRequestDescription>
    <CreatedDate>02/03/2015</CreatedDate>
    <ClosedDate>02/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>917</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Call DkmClrValue.Close more conservatively</Title>
    <PullRequestDescription>The problem arises when more than one expanion shares the same value - for
example, those parented by a common AggregateExpansion.  Since this is an
optimization anyway (the debugger would eventually close them on its own),
we'll just conservatively focus on member and array expensions, since they
always "own" the value in aggregate expansions.

Fixes #901.
</PullRequestDescription>
    <CreatedDate>26/02/2015</CreatedDate>
    <ClosedDate>27/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>916</PullRequestID>
    <RepoID>1</RepoID>
    <Title>update unit tests to use localized resources</Title>
    <PullRequestDescription>Fixes #818.
</PullRequestDescription>
    <CreatedDate>26/02/2015</CreatedDate>
    <ClosedDate>03/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>904</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix broken VB EC tests.</Title>
    <PullRequestDescription>
    </PullRequestDescription>
    <CreatedDate>26/02/2015</CreatedDate>
    <ClosedDate>26/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>882</PullRequestID>
    <RepoID>1</RepoID>
    <Title>update unit tests to use localized resources and fix product code that wasn't</Title>
    <PullRequestDescription>This also fixes a subtle localization bug around `CSharpFeaturesResources.DisposePattern` and `VBFeaturesResources.DisposePattern` where they started with a blank line that PLOC trims out.  I've updated both `DisposePattern`s to remove that initial blank line.
</PullRequestDescription>
    <CreatedDate>26/02/2015</CreatedDate>
    <ClosedDate>03/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>880</PullRequestID>
    <RepoID>1</RepoID>
    <Title>update unit tests to use localized resources</Title>
    <PullRequestDescription>More of the same.  Fixes #819.
</PullRequestDescription>
    <CreatedDate>26/02/2015</CreatedDate>
    <ClosedDate>03/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>870</PullRequestID>
    <RepoID>1</RepoID>
    <Title>update Roslyn.Services.Editor.UnitTests.dll to use localized resources</Title>
    <PullRequestDescription>Fixes #820.
</PullRequestDescription>
    <CreatedDate>25/02/2015</CreatedDate>
    <ClosedDate>03/03/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>842</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Add explicit null checks during module lookup</Title>
    <PullRequestDescription>We got a release-build dump with a NRE in a location that didn't make sense.  Based on our best guess of what happened (something that should be impossible) add some explicit checks so that we'll get a clearer stack trace if it happens again.

No tests since we still believe this is impossible.
</PullRequestDescription>
    <CreatedDate>25/02/2015</CreatedDate>
    <ClosedDate>25/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>726</PullRequestID>
    <RepoID>1</RepoID>
    <Title>try bind to the method symbol when showing signature help</Title>
    <PullRequestDescription>fixes #699.
</PullRequestDescription>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>21/04/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>552</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Allow a method's type parameter to be used in nameof() in parameter default value</Title>
    <PullRequestDescription>Fixes #42

&lt;!---
@huboard:{"order":4.6875}
--&gt;
</PullRequestDescription>
    <CreatedDate>16/02/2015</CreatedDate>
    <ClosedDate>17/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>513</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Move enforcement of "no static type as type argument" to constraint validation</Title>
    <PullRequestDescription>Fixes #345 and #511

&lt;!---
@huboard:{"order":6.5625}
--&gt;
</PullRequestDescription>
    <CreatedDate>14/02/2015</CreatedDate>
    <ClosedDate>18/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>383</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix #295</Title>
    <PullRequestDescription>
    </PullRequestDescription>
    <CreatedDate>10/02/2015</CreatedDate>
    <ClosedDate>10/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>381</PullRequestID>
    <RepoID>1</RepoID>
    <Title>properly handle VB Global namespace in DeclaredSymbolInfo</Title>
    <PullRequestDescription>When walking the syntax trees to find DeclaredSymbolInfos, I missed a case where VB can have "Namespace Global".  Functionally this is no different than hitting the default case of the Select where I also Return Nothing, but it's a lot nicer to not have asserts :smile:.
</PullRequestDescription>
    <CreatedDate>10/02/2015</CreatedDate>
    <ClosedDate>11/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>331</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Allow 'is' for static classes for compatibility</Title>
    <PullRequestDescription>but continue to report the diagnostic if "strict" mode is requested.
Fixes #324

&lt;!---
@huboard:{"order":324.25,"milestone_order":331,"custom_state":""}
--&gt;
</PullRequestDescription>
    <CreatedDate>09/02/2015</CreatedDate>
    <ClosedDate>10/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>329</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix #308 and #306 - issues with dynamic expressions in string interpolation</Title>
    <PullRequestDescription>Fixes #306 and #308.
</PullRequestDescription>
    <CreatedDate>09/02/2015</CreatedDate>
    <ClosedDate>09/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>209</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix SimpleDiagnostic GetHashCode is more specific than Equals</Title>
    <PullRequestDescription>Fixes #57.

I hope it is okay that I just went ahead and fixed it.
</PullRequestDescription>
    <CreatedDate>03/02/2015</CreatedDate>
    <ClosedDate>11/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>203</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fixes Grammar in SourceTextContainer exception message</Title>
    <PullRequestDescription>This resolves #38 by fixing the grammar, removing the unused resource value and adding unit tests for SourceTextContainerExtensions
</PullRequestDescription>
    <CreatedDate>02/02/2015</CreatedDate>
    <ClosedDate>17/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>184</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Fix warning CA2002: Do not lock on objects with weak identity</Title>
    <PullRequestDescription>This commit changes 'lock (this)' usage into a lock on a private
object which only instance is knowledgeable about.
</PullRequestDescription>
    <CreatedDate>30/01/2015</CreatedDate>
    <ClosedDate>13/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>75</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Update binding redirects for versions 0.7-1.0.</Title>
    <PullRequestDescription>Enable debugging for roslyn OSS with Visual Studio 2015 CTP 5.
</PullRequestDescription>
    <CreatedDate>25/01/2015</CreatedDate>
    <ClosedDate>28/01/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>65</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Typo in SyntaxAnnotation class description</Title>
    <PullRequestDescription>Baby steps... :)

&lt;!---
@huboard:{"order":13.0,"milestone_order":65,"custom_state":""}
--&gt;
</PullRequestDescription>
    <CreatedDate>24/01/2015</CreatedDate>
    <ClosedDate>13/02/2015</ClosedDate>
  </PullRequest>
  <PullRequest>
    <PullRequestID>6</PullRequestID>
    <RepoID>1</RepoID>
    <Title>Corrected documentation on FullSpan and Span</Title>
    <PullRequestDescription>As per the [Incorrect Docs on FullSpan/Span properties](http://roslyn.codeplex.com/workitem/260) issue, the documentation was reversed on a few of these pairs.

&lt;!---
@huboard:{"order":8.0}
--&gt;
</PullRequestDescription>
    <CreatedDate>15/01/2015</CreatedDate>
    <ClosedDate>09/02/2015</ClosedDate>
  </PullRequest>
</PullRequests>
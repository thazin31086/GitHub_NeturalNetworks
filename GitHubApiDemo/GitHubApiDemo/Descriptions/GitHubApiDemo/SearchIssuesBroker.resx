<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Archived" xml:space="preserve">
    <value>A value that determines if the search results are limited to issues in only archived or only non-archived repositories.  The default is to include both archived and non-archived repositories.</value>
  </data>
  <data name="Assignee" xml:space="preserve">
    <value>Limit the search results to issues assigned to the specified user.</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>Limit the search results to issues created by the specified user.</value>
  </data>
  <data name="Base" xml:space="preserve">
    <value>Limit the search results to issues based on the branch they are merging into.</value>
  </data>
  <data name="Closed" xml:space="preserve">
    <value>Limit the search results to issues closed during the specified range of dates.</value>
  </data>
  <data name="Commenter" xml:space="preserve">
    <value>Limit the search results to issues commented on by the specified user.</value>
  </data>
  <data name="Comments" xml:space="preserve">
    <value>Limit the search results to issues that have a number of comments within the specified range.</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Limit the search results to issues created during the specified range of dates.</value>
  </data>
  <data name="Exclusions" xml:space="preserve">
    <value>Limit the search results to exclude the specified criteria.</value>
  </data>
  <data name="Head" xml:space="preserve">
    <value>Limit the search results to issues descended from the specified branch.</value>
  </data>
  <data name="In" xml:space="preserve">
    <value>Limit the search results to issues where the specified field(s) contain the search term (Term).</value>
  </data>
  <data name="Involves" xml:space="preserve">
    <value>Limit the search results to issues assigned to, created by, commented on, or mentioning the specified user.</value>
  </data>
  <data name="Is" xml:space="preserve">
    <value>Limit the search results to issues that match one or more of the specified states.  For example, issues that are open, closed, merged, unmerged, etc.</value>
  </data>
  <data name="Labels" xml:space="preserve">
    <value>Limit the search results to issues with the specified labels.  The labels are specified as a comma-separated list.</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Limit the search results to issues that are in repositories that match the specified programming language.</value>
  </data>
  <data name="Mentions" xml:space="preserve">
    <value>Limit the search results to issues mentioning the specified user.</value>
  </data>
  <data name="Merged" xml:space="preserve">
    <value>Limit the search results to issues that were merged within the specified date range.</value>
  </data>
  <data name="Milestone" xml:space="preserve">
    <value>Limit the search results to issues with the specified milestone.</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>Limit the search results to issues missing the specified metadata.  For example, issues that lack a label, milestone, or assigned user.</value>
  </data>
  <data name="Repos" xml:space="preserve">
    <value>Limit the search results to issues in the specified set of repositories.  The repositories are specified as a comma-separated list, using an "owner/name" format for each individual repository.</value>
  </data>
  <data name="SortField" xml:space="preserve">
    <value>Sort the search results by the specified field.</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>Limit the search results to issues in the specified state (e.g. open or closed).</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Limit the search results to issues with the specified commitment status (e.g. pending, success, error, failure, etc.).</value>
  </data>
  <data name="Team" xml:space="preserve">
    <value>Limit the search results to issues mentioning the specified team (within an organization).</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Limit the search results to issues of the specified type (e.g. issues or pull requests).</value>
  </data>
  <data name="Updated" xml:space="preserve">
    <value>Limit the search results to issues updated with the specified range of dates.</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>Limit the search results to issues in repositories owned by the specified user.</value>
  </data>
</root>